{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "17f1eaa9",
   "metadata": {
    "papermill": {
     "duration": 0.015927,
     "end_time": "2024-11-20T20:02:50.733466",
     "exception": false,
     "start_time": "2024-11-20T20:02:50.717539",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Rossman data preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1e29bd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:02:50.763402Z",
     "iopub.status.busy": "2024-11-20T20:02:50.762887Z",
     "iopub.status.idle": "2024-11-20T20:02:51.709894Z",
     "shell.execute_reply": "2024-11-20T20:02:51.708460Z"
    },
    "papermill": {
     "duration": 0.9637,
     "end_time": "2024-11-20T20:02:51.712213",
     "exception": false,
     "start_time": "2024-11-20T20:02:50.748513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/rossmann-store-sales/sample_submission.csv\n",
      "/kaggle/input/rossmann-store-sales/store.csv\n",
      "/kaggle/input/rossmann-store-sales/train.csv\n",
      "/kaggle/input/rossmann-store-sales/test.csv\n",
      "/kaggle/input/rossmann-additional/sample_submission.csv\n",
      "/kaggle/input/rossmann-additional/state_names.csv\n",
      "/kaggle/input/rossmann-additional/weather.csv\n",
      "/kaggle/input/rossmann-additional/googletrend.csv\n",
      "/kaggle/input/rossmann-additional/store_states.csv\n",
      "/kaggle/input/rossmann-additional/store.csv\n",
      "/kaggle/input/rossmann-additional/train.csv\n",
      "/kaggle/input/rossmann-additional/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd52e901",
   "metadata": {
    "papermill": {
     "duration": 0.012694,
     "end_time": "2024-11-20T20:02:51.738307",
     "exception": false,
     "start_time": "2024-11-20T20:02:51.725613",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Visualizing the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1fa28d00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:02:51.766417Z",
     "iopub.status.busy": "2024-11-20T20:02:51.765280Z",
     "iopub.status.idle": "2024-11-20T20:03:15.975572Z",
     "shell.execute_reply": "2024-11-20T20:03:15.974574Z"
    },
    "papermill": {
     "duration": 24.22693,
     "end_time": "2024-11-20T20:03:15.978037",
     "exception": false,
     "start_time": "2024-11-20T20:02:51.751107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from fastai.tabular.all import *\n",
    "from fastai.learner import *\n",
    "from fastai.vision.all import *\n",
    "import tensorflow.keras\n",
    "import matplotlib as plt\n",
    "import sklearn\n",
    "import datetime\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import fastai.metrics\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c1ac2a82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:16.007905Z",
     "iopub.status.busy": "2024-11-20T20:03:16.006311Z",
     "iopub.status.idle": "2024-11-20T20:03:17.525708Z",
     "shell.execute_reply": "2024-11-20T20:03:17.524658Z"
    },
    "papermill": {
     "duration": 1.536685,
     "end_time": "2024-11-20T20:03:17.528267",
     "exception": false,
     "start_time": "2024-11-20T20:03:15.991582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "path = '/kaggle/input/rossmann-additional/'\n",
    "table_names = ['train', 'store', 'store_states', 'state_names', 'googletrend', 'weather', 'test']\n",
    "train, store, store_states, state_names, googletrend, weather, test = tables  = [pd.read_csv(path + fname+'.csv',\n",
    "                                                                             low_memory=False) for fname in table_names]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fcdb409f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.558164Z",
     "iopub.status.busy": "2024-11-20T20:03:17.557792Z",
     "iopub.status.idle": "2024-11-20T20:03:17.565467Z",
     "shell.execute_reply": "2024-11-20T20:03:17.564399Z"
    },
    "papermill": {
     "duration": 0.02487,
     "end_time": "2024-11-20T20:03:17.567815",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.542945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1017209, 41088)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train), len(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f0e4ce5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.595642Z",
     "iopub.status.busy": "2024-11-20T20:03:17.595238Z",
     "iopub.status.idle": "2024-11-20T20:03:17.616662Z",
     "shell.execute_reply": "2024-11-20T20:03:17.615526Z"
    },
    "papermill": {
     "duration": 0.038079,
     "end_time": "2024-11-20T20:03:17.619113",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.581034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7bc5066a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.647977Z",
     "iopub.status.busy": "2024-11-20T20:03:17.647515Z",
     "iopub.status.idle": "2024-11-20T20:03:17.663163Z",
     "shell.execute_reply": "2024-11-20T20:03:17.662016Z"
    },
    "papermill": {
     "duration": 0.033181,
     "end_time": "2024-11-20T20:03:17.665539",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.632358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-09-17</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-09-17</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-09-17</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-09-17</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-09-17</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  Store  DayOfWeek        Date  Open  Promo StateHoliday  SchoolHoliday\n",
       "0   1      1          4  2015-09-17   1.0      1            0              0\n",
       "1   2      3          4  2015-09-17   1.0      1            0              0\n",
       "2   3      7          4  2015-09-17   1.0      1            0              0\n",
       "3   4      8          4  2015-09-17   1.0      1            0              0\n",
       "4   5      9          4  2015-09-17   1.0      1            0              0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e0040641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.694087Z",
     "iopub.status.busy": "2024-11-20T20:03:17.693662Z",
     "iopub.status.idle": "2024-11-20T20:03:17.706520Z",
     "shell.execute_reply": "2024-11-20T20:03:17.705443Z"
    },
    "papermill": {
     "duration": 0.029804,
     "end_time": "2024-11-20T20:03:17.708701",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.678897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Store</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StoreType</th>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Assortment</th>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <td>1270.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>14130.0</td>\n",
       "      <td>620.0</td>\n",
       "      <td>29910.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <td>9.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <td>2008.0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>2015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Promo2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PromoInterval</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                0                1                2       3  \\\n",
       "Store                           1                2                3       4   \n",
       "StoreType                       c                a                a       c   \n",
       "Assortment                      a                a                a       c   \n",
       "CompetitionDistance        1270.0            570.0          14130.0   620.0   \n",
       "CompetitionOpenSinceMonth     9.0             11.0             12.0     9.0   \n",
       "CompetitionOpenSinceYear   2008.0           2007.0           2006.0  2009.0   \n",
       "Promo2                          0                1                1       0   \n",
       "Promo2SinceWeek               NaN             13.0             14.0     NaN   \n",
       "Promo2SinceYear               NaN           2010.0           2011.0     NaN   \n",
       "PromoInterval                 NaN  Jan,Apr,Jul,Oct  Jan,Apr,Jul,Oct     NaN   \n",
       "\n",
       "                                 4  \n",
       "Store                            5  \n",
       "StoreType                        a  \n",
       "Assortment                       a  \n",
       "CompetitionDistance        29910.0  \n",
       "CompetitionOpenSinceMonth      4.0  \n",
       "CompetitionOpenSinceYear    2015.0  \n",
       "Promo2                           0  \n",
       "Promo2SinceWeek                NaN  \n",
       "Promo2SinceYear                NaN  \n",
       "PromoInterval                  NaN  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store.head().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4c06f825",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.738517Z",
     "iopub.status.busy": "2024-11-20T20:03:17.738081Z",
     "iopub.status.idle": "2024-11-20T20:03:17.748047Z",
     "shell.execute_reply": "2024-11-20T20:03:17.746809Z"
    },
    "papermill": {
     "duration": 0.027802,
     "end_time": "2024-11-20T20:03:17.750222",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.722420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>HE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>TH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>NW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>BE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store State\n",
       "0      1    HE\n",
       "1      2    TH\n",
       "2      3    NW\n",
       "3      4    BE\n",
       "4      5    SN"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_states.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3a2d6dc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.780266Z",
     "iopub.status.busy": "2024-11-20T20:03:17.779105Z",
     "iopub.status.idle": "2024-11-20T20:03:17.789452Z",
     "shell.execute_reply": "2024-11-20T20:03:17.788281Z"
    },
    "papermill": {
     "duration": 0.02787,
     "end_time": "2024-11-20T20:03:17.791797",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.763927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StateName</th>\n",
       "      <th>State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BadenWuerttemberg</td>\n",
       "      <td>BW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bayern</td>\n",
       "      <td>BY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Berlin</td>\n",
       "      <td>BE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brandenburg</td>\n",
       "      <td>BB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bremen</td>\n",
       "      <td>HB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           StateName State\n",
       "0  BadenWuerttemberg    BW\n",
       "1             Bayern    BY\n",
       "2             Berlin    BE\n",
       "3        Brandenburg    BB\n",
       "4             Bremen    HB"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_names.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "10e7ede0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.822158Z",
     "iopub.status.busy": "2024-11-20T20:03:17.821711Z",
     "iopub.status.idle": "2024-11-20T20:03:17.836114Z",
     "shell.execute_reply": "2024-11-20T20:03:17.835013Z"
    },
    "papermill": {
     "duration": 0.032607,
     "end_time": "2024-11-20T20:03:17.838440",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.805833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>file</th>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>2013-01-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max_TemperatureC</th>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean_TemperatureC</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Min_TemperatureC</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dew_PointC</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MeanDew_PointC</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Min_DewpointC</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max_Humidity</th>\n",
       "      <td>94</td>\n",
       "      <td>93</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean_Humidity</th>\n",
       "      <td>87</td>\n",
       "      <td>85</td>\n",
       "      <td>93</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Min_Humidity</th>\n",
       "      <td>65</td>\n",
       "      <td>78</td>\n",
       "      <td>77</td>\n",
       "      <td>87</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max_Sea_Level_PressurehPa</th>\n",
       "      <td>1013</td>\n",
       "      <td>1028</td>\n",
       "      <td>1035</td>\n",
       "      <td>1036</td>\n",
       "      <td>1035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean_Sea_Level_PressurehPa</th>\n",
       "      <td>1005</td>\n",
       "      <td>1022</td>\n",
       "      <td>1030</td>\n",
       "      <td>1035</td>\n",
       "      <td>1034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Min_Sea_Level_PressurehPa</th>\n",
       "      <td>1001</td>\n",
       "      <td>1014</td>\n",
       "      <td>1026</td>\n",
       "      <td>1034</td>\n",
       "      <td>1033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max_VisibilityKm</th>\n",
       "      <td>31.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean_VisibilityKm</th>\n",
       "      <td>12.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Min_VisibilitykM</th>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max_Wind_SpeedKm_h</th>\n",
       "      <td>39</td>\n",
       "      <td>24</td>\n",
       "      <td>26</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mean_Wind_SpeedKm_h</th>\n",
       "      <td>26</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max_Gust_SpeedKm_h</th>\n",
       "      <td>58.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Precipitationmm</th>\n",
       "      <td>5.08</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.02</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CloudCover</th>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Events</th>\n",
       "      <td>Rain</td>\n",
       "      <td>Rain</td>\n",
       "      <td>Rain</td>\n",
       "      <td>Rain</td>\n",
       "      <td>Rain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WindDirDegrees</th>\n",
       "      <td>215</td>\n",
       "      <td>225</td>\n",
       "      <td>240</td>\n",
       "      <td>263</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             0                   1  \\\n",
       "file                        NordrheinWestfalen  NordrheinWestfalen   \n",
       "Date                                2013-01-01          2013-01-02   \n",
       "Max_TemperatureC                             8                   7   \n",
       "Mean_TemperatureC                            4                   4   \n",
       "Min_TemperatureC                             2                   1   \n",
       "Dew_PointC                                   7                   5   \n",
       "MeanDew_PointC                               5                   3   \n",
       "Min_DewpointC                                1                   2   \n",
       "Max_Humidity                                94                  93   \n",
       "Mean_Humidity                               87                  85   \n",
       "Min_Humidity                                65                  78   \n",
       "Max_Sea_Level_PressurehPa                 1013                1028   \n",
       "Mean_Sea_Level_PressurehPa                1005                1022   \n",
       "Min_Sea_Level_PressurehPa                 1001                1014   \n",
       "Max_VisibilityKm                          31.0                31.0   \n",
       "Mean_VisibilityKm                         12.0                14.0   \n",
       "Min_VisibilitykM                           4.0                10.0   \n",
       "Max_Wind_SpeedKm_h                          39                  24   \n",
       "Mean_Wind_SpeedKm_h                         26                  16   \n",
       "Max_Gust_SpeedKm_h                        58.0                 NaN   \n",
       "Precipitationmm                           5.08                 0.0   \n",
       "CloudCover                                 6.0                 6.0   \n",
       "Events                                    Rain                Rain   \n",
       "WindDirDegrees                             215                 225   \n",
       "\n",
       "                                             2                   3  \\\n",
       "file                        NordrheinWestfalen  NordrheinWestfalen   \n",
       "Date                                2013-01-03          2013-01-04   \n",
       "Max_TemperatureC                            11                   9   \n",
       "Mean_TemperatureC                            8                   9   \n",
       "Min_TemperatureC                             6                   8   \n",
       "Dew_PointC                                  10                   9   \n",
       "MeanDew_PointC                               8                   9   \n",
       "Min_DewpointC                                4                   8   \n",
       "Max_Humidity                               100                 100   \n",
       "Mean_Humidity                               93                  94   \n",
       "Min_Humidity                                77                  87   \n",
       "Max_Sea_Level_PressurehPa                 1035                1036   \n",
       "Mean_Sea_Level_PressurehPa                1030                1035   \n",
       "Min_Sea_Level_PressurehPa                 1026                1034   \n",
       "Max_VisibilityKm                          31.0                11.0   \n",
       "Mean_VisibilityKm                          8.0                 5.0   \n",
       "Min_VisibilitykM                           2.0                 2.0   \n",
       "Max_Wind_SpeedKm_h                          26                  23   \n",
       "Mean_Wind_SpeedKm_h                         21                  14   \n",
       "Max_Gust_SpeedKm_h                         NaN                 NaN   \n",
       "Precipitationmm                           1.02                0.25   \n",
       "CloudCover                                 7.0                 7.0   \n",
       "Events                                    Rain                Rain   \n",
       "WindDirDegrees                             240                 263   \n",
       "\n",
       "                                             4  \n",
       "file                        NordrheinWestfalen  \n",
       "Date                                2013-01-05  \n",
       "Max_TemperatureC                             8  \n",
       "Mean_TemperatureC                            8  \n",
       "Min_TemperatureC                             7  \n",
       "Dew_PointC                                   8  \n",
       "MeanDew_PointC                               7  \n",
       "Min_DewpointC                                6  \n",
       "Max_Humidity                               100  \n",
       "Mean_Humidity                               94  \n",
       "Min_Humidity                                87  \n",
       "Max_Sea_Level_PressurehPa                 1035  \n",
       "Mean_Sea_Level_PressurehPa                1034  \n",
       "Min_Sea_Level_PressurehPa                 1033  \n",
       "Max_VisibilityKm                          10.0  \n",
       "Mean_VisibilityKm                          6.0  \n",
       "Min_VisibilitykM                           3.0  \n",
       "Max_Wind_SpeedKm_h                          16  \n",
       "Mean_Wind_SpeedKm_h                         10  \n",
       "Max_Gust_SpeedKm_h                         NaN  \n",
       "Precipitationmm                            0.0  \n",
       "CloudCover                                 7.0  \n",
       "Events                                    Rain  \n",
       "WindDirDegrees                             268  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather.head().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5ab773b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.885782Z",
     "iopub.status.busy": "2024-11-20T20:03:17.885374Z",
     "iopub.status.idle": "2024-11-20T20:03:17.895496Z",
     "shell.execute_reply": "2024-11-20T20:03:17.894402Z"
    },
    "papermill": {
     "duration": 0.028821,
     "end_time": "2024-11-20T20:03:17.897911",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.869090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file</th>\n",
       "      <th>week</th>\n",
       "      <th>trend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-02 - 2012-12-08</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-09 - 2012-12-15</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-16 - 2012-12-22</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-23 - 2012-12-29</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-30 - 2013-01-05</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             file                     week  trend\n",
       "0  Rossmann_DE_SN  2012-12-02 - 2012-12-08     96\n",
       "1  Rossmann_DE_SN  2012-12-09 - 2012-12-15     95\n",
       "2  Rossmann_DE_SN  2012-12-16 - 2012-12-22     91\n",
       "3  Rossmann_DE_SN  2012-12-23 - 2012-12-29     48\n",
       "4  Rossmann_DE_SN  2012-12-30 - 2013-01-05     67"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googletrend.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df6904f6",
   "metadata": {
    "papermill": {
     "duration": 0.014045,
     "end_time": "2024-11-20T20:03:17.927158",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.913113",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc8d600d",
   "metadata": {
    "papermill": {
     "duration": 0.013842,
     "end_time": "2024-11-20T20:03:17.955450",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.941608",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Merging tables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94da1ad3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:17.985777Z",
     "iopub.status.busy": "2024-11-20T20:03:17.985377Z",
     "iopub.status.idle": "2024-11-20T20:03:17.991344Z",
     "shell.execute_reply": "2024-11-20T20:03:17.989952Z"
    },
    "papermill": {
     "duration": 0.023728,
     "end_time": "2024-11-20T20:03:17.993536",
     "exception": false,
     "start_time": "2024-11-20T20:03:17.969808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def join_df(left, right, left_on, right_on=None, suffix='_y'):\n",
    "    if right_on is None: right_on = left_on\n",
    "    return left.merge(right, how='left', left_on=left_on, right_on=right_on, \n",
    "                      suffixes=(\"\", suffix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11174302",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.026903Z",
     "iopub.status.busy": "2024-11-20T20:03:18.026061Z",
     "iopub.status.idle": "2024-11-20T20:03:18.056171Z",
     "shell.execute_reply": "2024-11-20T20:03:18.055032Z"
    },
    "papermill": {
     "duration": 0.050484,
     "end_time": "2024-11-20T20:03:18.058505",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.008021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file</th>\n",
       "      <th>Date</th>\n",
       "      <th>State</th>\n",
       "      <th>StateName</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>NW</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>NW</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>NW</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>NW</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>NW</td>\n",
       "      <td>NordrheinWestfalen</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 file        Date State           StateName\n",
       "0  NordrheinWestfalen  2013-01-01    NW  NordrheinWestfalen\n",
       "1  NordrheinWestfalen  2013-01-02    NW  NordrheinWestfalen\n",
       "2  NordrheinWestfalen  2013-01-03    NW  NordrheinWestfalen\n",
       "3  NordrheinWestfalen  2013-01-04    NW  NordrheinWestfalen\n",
       "4  NordrheinWestfalen  2013-01-05    NW  NordrheinWestfalen"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather = join_df(weather, state_names, \"file\", \"StateName\")\n",
    "weather[['file', 'Date', 'State', 'StateName']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "35ce2c63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.091748Z",
     "iopub.status.busy": "2024-11-20T20:03:18.090828Z",
     "iopub.status.idle": "2024-11-20T20:03:18.100061Z",
     "shell.execute_reply": "2024-11-20T20:03:18.098984Z"
    },
    "papermill": {
     "duration": 0.028356,
     "end_time": "2024-11-20T20:03:18.102388",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.074032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(weather[weather.State.isnull()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e8f6a923",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.134059Z",
     "iopub.status.busy": "2024-11-20T20:03:18.133674Z",
     "iopub.status.idle": "2024-11-20T20:03:18.140853Z",
     "shell.execute_reply": "2024-11-20T20:03:18.139693Z"
    },
    "papermill": {
     "duration": 0.025225,
     "end_time": "2024-11-20T20:03:18.142984",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.117759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "weather.drop(columns=['file', 'StateName'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cd4c17b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.174398Z",
     "iopub.status.busy": "2024-11-20T20:03:18.174010Z",
     "iopub.status.idle": "2024-11-20T20:03:18.709328Z",
     "shell.execute_reply": "2024-11-20T20:03:18.708356Z"
    },
    "papermill": {
     "duration": 0.554075,
     "end_time": "2024-11-20T20:03:18.711702",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.157627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "store = join_df(store, store_states, 'Store')\n",
    "store = join_df(store, weather, 'State')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4c0eec79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.743059Z",
     "iopub.status.busy": "2024-11-20T20:03:18.742065Z",
     "iopub.status.idle": "2024-11-20T20:03:18.751151Z",
     "shell.execute_reply": "2024-11-20T20:03:18.750076Z"
    },
    "papermill": {
     "duration": 0.026864,
     "end_time": "2024-11-20T20:03:18.753167",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.726303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(store[store.Mean_TemperatureC.isnull()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "349aa697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.784066Z",
     "iopub.status.busy": "2024-11-20T20:03:18.783705Z",
     "iopub.status.idle": "2024-11-20T20:03:18.793474Z",
     "shell.execute_reply": "2024-11-20T20:03:18.792396Z"
    },
    "papermill": {
     "duration": 0.027474,
     "end_time": "2024-11-20T20:03:18.795431",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.767957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file</th>\n",
       "      <th>week</th>\n",
       "      <th>trend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-02 - 2012-12-08</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-09 - 2012-12-15</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-16 - 2012-12-22</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-23 - 2012-12-29</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-30 - 2013-01-05</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             file                     week  trend\n",
       "0  Rossmann_DE_SN  2012-12-02 - 2012-12-08     96\n",
       "1  Rossmann_DE_SN  2012-12-09 - 2012-12-15     95\n",
       "2  Rossmann_DE_SN  2012-12-16 - 2012-12-22     91\n",
       "3  Rossmann_DE_SN  2012-12-23 - 2012-12-29     48\n",
       "4  Rossmann_DE_SN  2012-12-30 - 2013-01-05     67"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googletrend.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "378db805",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.826650Z",
     "iopub.status.busy": "2024-11-20T20:03:18.826289Z",
     "iopub.status.idle": "2024-11-20T20:03:18.845846Z",
     "shell.execute_reply": "2024-11-20T20:03:18.844634Z"
    },
    "papermill": {
     "duration": 0.037725,
     "end_time": "2024-11-20T20:03:18.847998",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.810273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file</th>\n",
       "      <th>week</th>\n",
       "      <th>trend</th>\n",
       "      <th>Date</th>\n",
       "      <th>State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-02 - 2012-12-08</td>\n",
       "      <td>96</td>\n",
       "      <td>2012-12-02</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-09 - 2012-12-15</td>\n",
       "      <td>95</td>\n",
       "      <td>2012-12-09</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-16 - 2012-12-22</td>\n",
       "      <td>91</td>\n",
       "      <td>2012-12-16</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-23 - 2012-12-29</td>\n",
       "      <td>48</td>\n",
       "      <td>2012-12-23</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rossmann_DE_SN</td>\n",
       "      <td>2012-12-30 - 2013-01-05</td>\n",
       "      <td>67</td>\n",
       "      <td>2012-12-30</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             file                     week  trend        Date State\n",
       "0  Rossmann_DE_SN  2012-12-02 - 2012-12-08     96  2012-12-02    SN\n",
       "1  Rossmann_DE_SN  2012-12-09 - 2012-12-15     95  2012-12-09    SN\n",
       "2  Rossmann_DE_SN  2012-12-16 - 2012-12-22     91  2012-12-16    SN\n",
       "3  Rossmann_DE_SN  2012-12-23 - 2012-12-29     48  2012-12-23    SN\n",
       "4  Rossmann_DE_SN  2012-12-30 - 2013-01-05     67  2012-12-30    SN"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googletrend['Date'] = googletrend.week.str.split(' - ', expand=True)[0]\n",
    "googletrend['State'] = googletrend.file.str.split('_', expand=True)[2]\n",
    "googletrend.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7d773e10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.880035Z",
     "iopub.status.busy": "2024-11-20T20:03:18.879039Z",
     "iopub.status.idle": "2024-11-20T20:03:18.936224Z",
     "shell.execute_reply": "2024-11-20T20:03:18.935247Z"
    },
    "papermill": {
     "duration": 0.075613,
     "end_time": "2024-11-20T20:03:18.938431",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.862818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array(['HE', 'TH', 'NW', 'BE', 'SN', 'SH', 'HB,NI', 'BY', 'BW', 'RP',\n",
       "        'ST', 'HH'], dtype=object),\n",
       " array(['SN', None, 'BY', 'TH', 'NW', 'BE', 'RP', 'BW', 'NI', 'SH', 'HE',\n",
       "        'ST', 'HH', 'SL'], dtype=object))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store['State'].unique(),googletrend['State'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a44265d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:18.970734Z",
     "iopub.status.busy": "2024-11-20T20:03:18.970325Z",
     "iopub.status.idle": "2024-11-20T20:03:18.976636Z",
     "shell.execute_reply": "2024-11-20T20:03:18.975495Z"
    },
    "papermill": {
     "duration": 0.024931,
     "end_time": "2024-11-20T20:03:18.978923",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.953992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "googletrend.loc[googletrend.State=='NI', \"State\"] = 'HB,NI'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ecb13e5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.010964Z",
     "iopub.status.busy": "2024-11-20T20:03:19.010611Z",
     "iopub.status.idle": "2024-11-20T20:03:19.019720Z",
     "shell.execute_reply": "2024-11-20T20:03:19.018714Z"
    },
    "papermill": {
     "duration": 0.02758,
     "end_time": "2024-11-20T20:03:19.021687",
     "exception": false,
     "start_time": "2024-11-20T20:03:18.994107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trend_de = googletrend[googletrend.file == 'Rossmann_DE'][['Date', 'trend']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "902004c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.053323Z",
     "iopub.status.busy": "2024-11-20T20:03:19.052891Z",
     "iopub.status.idle": "2024-11-20T20:03:19.061479Z",
     "shell.execute_reply": "2024-11-20T20:03:19.060554Z"
    },
    "papermill": {
     "duration": 0.027018,
     "end_time": "2024-11-20T20:03:19.063743",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.036725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "googletrend = join_df(googletrend, trend_de, 'Date', suffix='_DE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fcfeb7a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.096434Z",
     "iopub.status.busy": "2024-11-20T20:03:19.095858Z",
     "iopub.status.idle": "2024-11-20T20:03:19.104803Z",
     "shell.execute_reply": "2024-11-20T20:03:19.103675Z"
    },
    "papermill": {
     "duration": 0.028074,
     "end_time": "2024-11-20T20:03:19.107064",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.078990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "googletrend.drop(columns=['file', 'week'], axis=1, inplace=True)\n",
    "googletrend = googletrend[~googletrend['State'].isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9357987c",
   "metadata": {
    "papermill": {
     "duration": 0.014829,
     "end_time": "2024-11-20T20:03:19.137229",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.122400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Adding dateparts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "04c92d8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.169240Z",
     "iopub.status.busy": "2024-11-20T20:03:19.168776Z",
     "iopub.status.idle": "2024-11-20T20:03:19.179590Z",
     "shell.execute_reply": "2024-11-20T20:03:19.178451Z"
    },
    "papermill": {
     "duration": 0.029531,
     "end_time": "2024-11-20T20:03:19.181915",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.152384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trend</th>\n",
       "      <th>Date</th>\n",
       "      <th>State</th>\n",
       "      <th>trend_DE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>96</td>\n",
       "      <td>2012-12-02</td>\n",
       "      <td>SN</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>95</td>\n",
       "      <td>2012-12-09</td>\n",
       "      <td>SN</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>2012-12-16</td>\n",
       "      <td>SN</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48</td>\n",
       "      <td>2012-12-23</td>\n",
       "      <td>SN</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>67</td>\n",
       "      <td>2012-12-30</td>\n",
       "      <td>SN</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   trend        Date State  trend_DE\n",
       "0     96  2012-12-02    SN        77\n",
       "1     95  2012-12-09    SN        76\n",
       "2     91  2012-12-16    SN        85\n",
       "3     48  2012-12-23    SN        59\n",
       "4     67  2012-12-30    SN        61"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googletrend.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4ec45074",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.214574Z",
     "iopub.status.busy": "2024-11-20T20:03:19.214167Z",
     "iopub.status.idle": "2024-11-20T20:03:19.235670Z",
     "shell.execute_reply": "2024-11-20T20:03:19.234486Z"
    },
    "papermill": {
     "duration": 0.040623,
     "end_time": "2024-11-20T20:03:19.238012",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.197389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
      "  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n"
     ]
    }
   ],
   "source": [
    "googletrend = add_datepart(googletrend, 'Date', drop=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "85f6ed7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.270534Z",
     "iopub.status.busy": "2024-11-20T20:03:19.270149Z",
     "iopub.status.idle": "2024-11-20T20:03:19.284199Z",
     "shell.execute_reply": "2024-11-20T20:03:19.283130Z"
    },
    "papermill": {
     "duration": 0.032857,
     "end_time": "2024-11-20T20:03:19.286356",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.253499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>trend</th>\n",
       "      <td>96</td>\n",
       "      <td>95</td>\n",
       "      <td>91</td>\n",
       "      <td>48</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <td>2012-12-02 00:00:00</td>\n",
       "      <td>2012-12-09 00:00:00</td>\n",
       "      <td>2012-12-16 00:00:00</td>\n",
       "      <td>2012-12-23 00:00:00</td>\n",
       "      <td>2012-12-30 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <td>SN</td>\n",
       "      <td>SN</td>\n",
       "      <td>SN</td>\n",
       "      <td>SN</td>\n",
       "      <td>SN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trend_DE</th>\n",
       "      <td>77</td>\n",
       "      <td>76</td>\n",
       "      <td>85</td>\n",
       "      <td>59</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Week</th>\n",
       "      <td>48</td>\n",
       "      <td>49</td>\n",
       "      <td>50</td>\n",
       "      <td>51</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Day</th>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dayofweek</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dayofyear</th>\n",
       "      <td>337</td>\n",
       "      <td>344</td>\n",
       "      <td>351</td>\n",
       "      <td>358</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_month_end</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_month_start</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_quarter_end</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_quarter_start</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_year_end</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_year_start</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Elapsed</th>\n",
       "      <td>1354406400.0</td>\n",
       "      <td>1355011200.0</td>\n",
       "      <td>1355616000.0</td>\n",
       "      <td>1356220800.0</td>\n",
       "      <td>1356825600.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    0                    1  \\\n",
       "trend                              96                   95   \n",
       "Date              2012-12-02 00:00:00  2012-12-09 00:00:00   \n",
       "State                              SN                   SN   \n",
       "trend_DE                           77                   76   \n",
       "Year                             2012                 2012   \n",
       "Month                              12                   12   \n",
       "Week                               48                   49   \n",
       "Day                                 2                    9   \n",
       "Dayofweek                           6                    6   \n",
       "Dayofyear                         337                  344   \n",
       "Is_month_end                    False                False   \n",
       "Is_month_start                  False                False   \n",
       "Is_quarter_end                  False                False   \n",
       "Is_quarter_start                False                False   \n",
       "Is_year_end                     False                False   \n",
       "Is_year_start                   False                False   \n",
       "Elapsed                  1354406400.0         1355011200.0   \n",
       "\n",
       "                                    2                    3  \\\n",
       "trend                              91                   48   \n",
       "Date              2012-12-16 00:00:00  2012-12-23 00:00:00   \n",
       "State                              SN                   SN   \n",
       "trend_DE                           85                   59   \n",
       "Year                             2012                 2012   \n",
       "Month                              12                   12   \n",
       "Week                               50                   51   \n",
       "Day                                16                   23   \n",
       "Dayofweek                           6                    6   \n",
       "Dayofyear                         351                  358   \n",
       "Is_month_end                    False                False   \n",
       "Is_month_start                  False                False   \n",
       "Is_quarter_end                  False                False   \n",
       "Is_quarter_start                False                False   \n",
       "Is_year_end                     False                False   \n",
       "Is_year_start                   False                False   \n",
       "Elapsed                  1355616000.0         1356220800.0   \n",
       "\n",
       "                                    4  \n",
       "trend                              67  \n",
       "Date              2012-12-30 00:00:00  \n",
       "State                              SN  \n",
       "trend_DE                           61  \n",
       "Year                             2012  \n",
       "Month                              12  \n",
       "Week                               52  \n",
       "Day                                30  \n",
       "Dayofweek                           6  \n",
       "Dayofyear                         365  \n",
       "Is_month_end                    False  \n",
       "Is_month_start                  False  \n",
       "Is_quarter_end                  False  \n",
       "Is_quarter_start                False  \n",
       "Is_year_end                     False  \n",
       "Is_year_start                   False  \n",
       "Elapsed                  1356825600.0  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googletrend.head().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ebc3f8bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:19.321246Z",
     "iopub.status.busy": "2024-11-20T20:03:19.320849Z",
     "iopub.status.idle": "2024-11-20T20:03:20.749480Z",
     "shell.execute_reply": "2024-11-20T20:03:20.748256Z"
    },
    "papermill": {
     "duration": 1.448537,
     "end_time": "2024-11-20T20:03:20.751893",
     "exception": false,
     "start_time": "2024-11-20T20:03:19.303356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
      "  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n"
     ]
    }
   ],
   "source": [
    "googletrend = googletrend[['trend', 'State', 'trend_DE', 'Week', 'Year']]\n",
    "store = add_datepart(store, 'Date', drop=False)\n",
    "store = join_df(store, googletrend, ['Week', 'Year', 'State'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "739acf48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:20.785042Z",
     "iopub.status.busy": "2024-11-20T20:03:20.784653Z",
     "iopub.status.idle": "2024-11-20T20:03:22.300421Z",
     "shell.execute_reply": "2024-11-20T20:03:22.299470Z"
    },
    "papermill": {
     "duration": 1.534941,
     "end_time": "2024-11-20T20:03:22.302704",
     "exception": false,
     "start_time": "2024-11-20T20:03:20.767763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
      "  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n",
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n",
      "  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n"
     ]
    }
   ],
   "source": [
    "make_date(train, 'Date')\n",
    "make_date(test, 'Date')\n",
    "train_fe = join_df(train, store, ['Store', 'Date'])\n",
    "test_fe = join_df(test, store, ['Store', 'Date'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "537fb1d8",
   "metadata": {
    "papermill": {
     "duration": 0.015574,
     "end_time": "2024-11-20T20:03:22.334451",
     "exception": false,
     "start_time": "2024-11-20T20:03:22.318877",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Elapsed times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "64258535",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:22.368919Z",
     "iopub.status.busy": "2024-11-20T20:03:22.368127Z",
     "iopub.status.idle": "2024-11-20T20:03:22.488109Z",
     "shell.execute_reply": "2024-11-20T20:03:22.486984Z"
    },
    "papermill": {
     "duration": 0.140181,
     "end_time": "2024-11-20T20:03:22.490684",
     "exception": false,
     "start_time": "2024-11-20T20:03:22.350503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_ftrs = pd.concat([train_fe, test_fe], axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "51bb4fa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:22.523781Z",
     "iopub.status.busy": "2024-11-20T20:03:22.523265Z",
     "iopub.status.idle": "2024-11-20T20:03:22.579479Z",
     "shell.execute_reply": "2024-11-20T20:03:22.578258Z"
    },
    "papermill": {
     "duration": 0.07568,
     "end_time": "2024-11-20T20:03:22.582041",
     "exception": false,
     "start_time": "2024-11-20T20:03:22.506361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', 'a', 'b', 'c'], dtype=object)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_ftrs['StateHoliday'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "712f047a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:22.616827Z",
     "iopub.status.busy": "2024-11-20T20:03:22.616040Z",
     "iopub.status.idle": "2024-11-20T20:03:22.691342Z",
     "shell.execute_reply": "2024-11-20T20:03:22.689987Z"
    },
    "papermill": {
     "duration": 0.094797,
     "end_time": "2024-11-20T20:03:22.693636",
     "exception": false,
     "start_time": "2024-11-20T20:03:22.598839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_ftrs.StateHoliday = all_ftrs.StateHoliday!='0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "24662788",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:03:22.727160Z",
     "iopub.status.busy": "2024-11-20T20:03:22.726756Z",
     "iopub.status.idle": "2024-11-20T20:04:01.559737Z",
     "shell.execute_reply": "2024-11-20T20:04:01.558663Z"
    },
    "papermill": {
     "duration": 38.852631,
     "end_time": "2024-11-20T20:04:01.562285",
     "exception": false,
     "start_time": "2024-11-20T20:03:22.709654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_ftrs = add_elapsed_times(all_ftrs, ['Promo', 'StateHoliday', 'SchoolHoliday'], \n",
    "                             date_field='Date', base_field='Store')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4c407e79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:01.596105Z",
     "iopub.status.busy": "2024-11-20T20:04:01.595732Z",
     "iopub.status.idle": "2024-11-20T20:04:01.603080Z",
     "shell.execute_reply": "2024-11-20T20:04:01.601881Z"
    },
    "papermill": {
     "duration": 0.026795,
     "end_time": "2024-11-20T20:04:01.605280",
     "exception": false,
     "start_time": "2024-11-20T20:04:01.578485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['StateHoliday',\n",
       " 'AfterStateHoliday',\n",
       " 'BeforeStateHoliday',\n",
       " 'StateHoliday_bw',\n",
       " 'StateHoliday_fw']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[c for c in all_ftrs.columns if 'StateHoliday' in c]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a2ef3301",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:01.640349Z",
     "iopub.status.busy": "2024-11-20T20:04:01.639927Z",
     "iopub.status.idle": "2024-11-20T20:04:01.645967Z",
     "shell.execute_reply": "2024-11-20T20:04:01.644808Z"
    },
    "papermill": {
     "duration": 0.026266,
     "end_time": "2024-11-20T20:04:01.648248",
     "exception": false,
     "start_time": "2024-11-20T20:04:01.621982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = all_ftrs.iloc[:len(train_fe)]\n",
    "test_df  = all_ftrs.iloc[len(train_fe):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "be54bb68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:01.683134Z",
     "iopub.status.busy": "2024-11-20T20:04:01.682701Z",
     "iopub.status.idle": "2024-11-20T20:04:01.824568Z",
     "shell.execute_reply": "2024-11-20T20:04:01.823088Z"
    },
    "papermill": {
     "duration": 0.16226,
     "end_time": "2024-11-20T20:04:01.827150",
     "exception": false,
     "start_time": "2024-11-20T20:04:01.664890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = train_df[train_df.Sales != 0.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "21afd1da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:01.861091Z",
     "iopub.status.busy": "2024-11-20T20:04:01.860665Z",
     "iopub.status.idle": "2024-11-20T20:04:01.865668Z",
     "shell.execute_reply": "2024-11-20T20:04:01.864465Z"
    },
    "papermill": {
     "duration": 0.024567,
     "end_time": "2024-11-20T20:04:01.867813",
     "exception": false,
     "start_time": "2024-11-20T20:04:01.843246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_clean = train_df\n",
    "test_clean = test_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4a9a67c",
   "metadata": {
    "papermill": {
     "duration": 0.015624,
     "end_time": "2024-11-20T20:04:01.899627",
     "exception": false,
     "start_time": "2024-11-20T20:04:01.884003",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preparing full data set ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "23376b72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:01.934977Z",
     "iopub.status.busy": "2024-11-20T20:04:01.934549Z",
     "iopub.status.idle": "2024-11-20T20:04:01.939352Z",
     "shell.execute_reply": "2024-11-20T20:04:01.938169Z"
    },
    "papermill": {
     "duration": 0.024608,
     "end_time": "2024-11-20T20:04:01.941574",
     "exception": false,
     "start_time": "2024-11-20T20:04:01.916966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df = train_clean\n",
    "test_df =test_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5f91c4f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.032988Z",
     "iopub.status.busy": "2024-11-20T20:04:02.032571Z",
     "iopub.status.idle": "2024-11-20T20:04:02.039915Z",
     "shell.execute_reply": "2024-11-20T20:04:02.038538Z"
    },
    "papermill": {
     "duration": 0.027255,
     "end_time": "2024-11-20T20:04:02.042025",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.014770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(844338, 41088)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_df),len(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0905bd9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.077261Z",
     "iopub.status.busy": "2024-11-20T20:04:02.076136Z",
     "iopub.status.idle": "2024-11-20T20:04:02.081339Z",
     "shell.execute_reply": "2024-11-20T20:04:02.080165Z"
    },
    "papermill": {
     "duration": 0.024921,
     "end_time": "2024-11-20T20:04:02.083549",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.058628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "procs=[FillMissing, Categorify, Normalize]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0a13ed2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.123269Z",
     "iopub.status.busy": "2024-11-20T20:04:02.122663Z",
     "iopub.status.idle": "2024-11-20T20:04:02.129417Z",
     "shell.execute_reply": "2024-11-20T20:04:02.128278Z"
    },
    "papermill": {
     "duration": 0.028551,
     "end_time": "2024-11-20T20:04:02.131785",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.103234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dep_var = 'Sales'\n",
    "cat_names = ['Store', 'DayOfWeek', 'Year', 'Month', 'Day', 'StateHoliday', 'StoreType', 'Assortment', \n",
    "    'PromoInterval', 'CompetitionOpenSinceYear', 'Promo2SinceYear', 'State', 'Week', 'Events', 'Promo_fw', \n",
    "    'Promo_bw', 'StateHoliday_fw', 'StateHoliday_bw', 'SchoolHoliday_fw', 'SchoolHoliday_bw']\n",
    "\n",
    "cont_names = ['CompetitionDistance', 'Max_TemperatureC', 'Mean_TemperatureC', 'Min_TemperatureC', \n",
    "    'Max_Humidity', 'Mean_Humidity', 'Min_Humidity', 'Max_Wind_SpeedKm_h', 'Mean_Wind_SpeedKm_h', \n",
    "    'CloudCover', 'trend', 'trend_DE', 'AfterStateHoliday', 'BeforeStateHoliday', 'Promo', 'SchoolHoliday']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5f8a64fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.169470Z",
     "iopub.status.busy": "2024-11-20T20:04:02.168146Z",
     "iopub.status.idle": "2024-11-20T20:04:02.436742Z",
     "shell.execute_reply": "2024-11-20T20:04:02.435658Z"
    },
    "papermill": {
     "duration": 0.288508,
     "end_time": "2024-11-20T20:04:02.439150",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.150642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dep_var = 'Sales'\n",
    "df = train_df[cat_names + cont_names + [dep_var,'Date']].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dd3bd127",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.472735Z",
     "iopub.status.busy": "2024-11-20T20:04:02.472381Z",
     "iopub.status.idle": "2024-11-20T20:04:02.480423Z",
     "shell.execute_reply": "2024-11-20T20:04:02.479397Z"
    },
    "papermill": {
     "duration": 0.027325,
     "end_time": "2024-11-20T20:04:02.482534",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.455209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Timestamp('2015-08-01 00:00:00'), Timestamp('2015-09-17 00:00:00'))"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df['Date'].min(), test_df['Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e7a848b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.516943Z",
     "iopub.status.busy": "2024-11-20T20:04:02.516556Z",
     "iopub.status.idle": "2024-11-20T20:04:02.542872Z",
     "shell.execute_reply": "2024-11-20T20:04:02.541676Z"
    },
    "papermill": {
     "duration": 0.046268,
     "end_time": "2024-11-20T20:04:02.545142",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.498874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41254"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cut = train_df['Date'][(train_df['Date'] == train_df['Date'][len(test_df)])].index.max()\n",
    "cut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4fb0998d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.580320Z",
     "iopub.status.busy": "2024-11-20T20:04:02.579896Z",
     "iopub.status.idle": "2024-11-20T20:04:02.617421Z",
     "shell.execute_reply": "2024-11-20T20:04:02.616164Z"
    },
    "papermill": {
     "duration": 0.058091,
     "end_time": "2024-11-20T20:04:02.619706",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.561615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "splits = (list(range(cut, len(train_df))),list(range(cut)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8d915ad0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.654707Z",
     "iopub.status.busy": "2024-11-20T20:04:02.654318Z",
     "iopub.status.idle": "2024-11-20T20:04:02.662395Z",
     "shell.execute_reply": "2024-11-20T20:04:02.661175Z"
    },
    "papermill": {
     "duration": 0.028169,
     "end_time": "2024-11-20T20:04:02.664772",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.636603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     5263.0\n",
       "1     6064.0\n",
       "2     8314.0\n",
       "3    13995.0\n",
       "4     4822.0\n",
       "Name: Sales, dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df[dep_var].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a4f68cb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.700703Z",
     "iopub.status.busy": "2024-11-20T20:04:02.699559Z",
     "iopub.status.idle": "2024-11-20T20:04:02.714229Z",
     "shell.execute_reply": "2024-11-20T20:04:02.712949Z"
    },
    "papermill": {
     "duration": 0.035018,
     "end_time": "2024-11-20T20:04:02.716920",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.681902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_df[dep_var] = np.log(train_df[dep_var])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2f856e69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.751434Z",
     "iopub.status.busy": "2024-11-20T20:04:02.751021Z",
     "iopub.status.idle": "2024-11-20T20:04:02.768228Z",
     "shell.execute_reply": "2024-11-20T20:04:02.767019Z"
    },
    "papermill": {
     "duration": 0.037374,
     "end_time": "2024-11-20T20:04:02.770767",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.733393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = test_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3e74bacd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.805313Z",
     "iopub.status.busy": "2024-11-20T20:04:02.804861Z",
     "iopub.status.idle": "2024-11-20T20:04:02.854654Z",
     "shell.execute_reply": "2024-11-20T20:04:02.853673Z"
    },
    "papermill": {
     "duration": 0.070098,
     "end_time": "2024-11-20T20:04:02.857249",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.787151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "splits = (list(range(cut, len(train_df))),list(range(cut)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "50b461bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.893024Z",
     "iopub.status.busy": "2024-11-20T20:04:02.892046Z",
     "iopub.status.idle": "2024-11-20T20:04:02.897450Z",
     "shell.execute_reply": "2024-11-20T20:04:02.896246Z"
    },
    "papermill": {
     "duration": 0.025352,
     "end_time": "2024-11-20T20:04:02.899614",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.874262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "paths = Path(\"/kaggle/working/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d61e43b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:02.935561Z",
     "iopub.status.busy": "2024-11-20T20:04:02.935165Z",
     "iopub.status.idle": "2024-11-20T20:04:05.199434Z",
     "shell.execute_reply": "2024-11-20T20:04:05.198162Z"
    },
    "papermill": {
     "duration": 2.284498,
     "end_time": "2024-11-20T20:04:05.201832",
     "exception": false,
     "start_time": "2024-11-20T20:04:02.917334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  to[n].fillna(self.na_dict[n], inplace=True)\n",
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  to[n].fillna(self.na_dict[n], inplace=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.92 s, sys: 333 ms, total: 2.26 s\n",
      "Wall time: 2.26 s\n"
     ]
    }
   ],
   "source": [
    "%time to = TabularPandas(train_df, procs, cat_names, cont_names, dep_var, y_block=TransformBlock(), splits=splits)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "dc74796a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:05.237106Z",
     "iopub.status.busy": "2024-11-20T20:04:05.236673Z",
     "iopub.status.idle": "2024-11-20T20:04:05.877607Z",
     "shell.execute_reply": "2024-11-20T20:04:05.876592Z"
    },
    "papermill": {
     "duration": 0.661506,
     "end_time": "2024-11-20T20:04:05.880273",
     "exception": false,
     "start_time": "2024-11-20T20:04:05.218767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dls = to.dataloaders(bs=512, path=paths)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "34c7b15a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:05.915171Z",
     "iopub.status.busy": "2024-11-20T20:04:05.914749Z",
     "iopub.status.idle": "2024-11-20T20:04:06.327215Z",
     "shell.execute_reply": "2024-11-20T20:04:06.325950Z"
    },
    "papermill": {
     "duration": 0.432514,
     "end_time": "2024-11-20T20:04:06.329405",
     "exception": false,
     "start_time": "2024-11-20T20:04:05.896891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>PromoInterval</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>State</th>\n",
       "      <th>Week</th>\n",
       "      <th>Events</th>\n",
       "      <th>Promo_fw</th>\n",
       "      <th>Promo_bw</th>\n",
       "      <th>StateHoliday_fw</th>\n",
       "      <th>StateHoliday_bw</th>\n",
       "      <th>SchoolHoliday_fw</th>\n",
       "      <th>SchoolHoliday_bw</th>\n",
       "      <th>CompetitionDistance_na</th>\n",
       "      <th>CloudCover_na</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>Max_TemperatureC</th>\n",
       "      <th>Mean_TemperatureC</th>\n",
       "      <th>Min_TemperatureC</th>\n",
       "      <th>Max_Humidity</th>\n",
       "      <th>Mean_Humidity</th>\n",
       "      <th>Min_Humidity</th>\n",
       "      <th>Max_Wind_SpeedKm_h</th>\n",
       "      <th>Mean_Wind_SpeedKm_h</th>\n",
       "      <th>CloudCover</th>\n",
       "      <th>trend</th>\n",
       "      <th>trend_DE</th>\n",
       "      <th>AfterStateHoliday</th>\n",
       "      <th>BeforeStateHoliday</th>\n",
       "      <th>Promo</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>831</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>#na#</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>#na#</td>\n",
       "      <td>NW</td>\n",
       "      <td>41</td>\n",
       "      <td>Fog</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>800.000177</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>98.0</td>\n",
       "      <td>75.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>13.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>4.000002</td>\n",
       "      <td>-25.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>9.874677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>868</td>\n",
       "      <td>6</td>\n",
       "      <td>2014</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>False</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>2014.0</td>\n",
       "      <td>HE</td>\n",
       "      <td>37</td>\n",
       "      <td>#na#</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1359.999934</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>1.600000e+01</td>\n",
       "      <td>88.0</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>23.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>86.000000</td>\n",
       "      <td>-20.000000</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>9.195734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>573</td>\n",
       "      <td>1</td>\n",
       "      <td>2014</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>BY</td>\n",
       "      <td>12</td>\n",
       "      <td>#na#</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1189.999875</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>93.0</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>32.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>69.999999</td>\n",
       "      <td>-32.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>8.667508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>508</td>\n",
       "      <td>6</td>\n",
       "      <td>2013</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "      <td>#na#</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>NW</td>\n",
       "      <td>22</td>\n",
       "      <td>Rain</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1279.999770</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.100000e+01</td>\n",
       "      <td>88.0</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>24.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>1.999998</td>\n",
       "      <td>-123.999998</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>8.604288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>99</td>\n",
       "      <td>3</td>\n",
       "      <td>2013</td>\n",
       "      <td>11</td>\n",
       "      <td>27</td>\n",
       "      <td>False</td>\n",
       "      <td>c</td>\n",
       "      <td>c</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>BY</td>\n",
       "      <td>48</td>\n",
       "      <td>Fog</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2029.999977</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>-5.999999</td>\n",
       "      <td>-1.000000e+01</td>\n",
       "      <td>100.0</td>\n",
       "      <td>97.999999</td>\n",
       "      <td>80.000001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>-28.000000</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>8.270781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>953</td>\n",
       "      <td>5</td>\n",
       "      <td>2014</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>TH</td>\n",
       "      <td>45</td>\n",
       "      <td>Rain</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>19829.999645</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>9.999999e-01</td>\n",
       "      <td>100.0</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>6.999999</td>\n",
       "      <td>-48.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>8.741137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>497</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>#na#</td>\n",
       "      <td>#na#</td>\n",
       "      <td>#na#</td>\n",
       "      <td>HE</td>\n",
       "      <td>32</td>\n",
       "      <td>#na#</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>1609.999926</td>\n",
       "      <td>33.000001</td>\n",
       "      <td>23.999999</td>\n",
       "      <td>1.500000e+01</td>\n",
       "      <td>82.0</td>\n",
       "      <td>51.999999</td>\n",
       "      <td>20.999999</td>\n",
       "      <td>21.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>66.999999</td>\n",
       "      <td>-59.000001</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>8.913954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1099</td>\n",
       "      <td>6</td>\n",
       "      <td>2014</td>\n",
       "      <td>12</td>\n",
       "      <td>27</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>SH</td>\n",
       "      <td>52</td>\n",
       "      <td>#na#</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>200.000104</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-3.000000</td>\n",
       "      <td>-6.000000e+00</td>\n",
       "      <td>96.0</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>19.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>0.999999</td>\n",
       "      <td>-5.000000</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>9.035868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>185</td>\n",
       "      <td>5</td>\n",
       "      <td>2013</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>False</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>#na#</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>#na#</td>\n",
       "      <td>BE</td>\n",
       "      <td>50</td>\n",
       "      <td>Fog</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1859.999917</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>-9.999998e-01</td>\n",
       "      <td>100.0</td>\n",
       "      <td>97.999999</td>\n",
       "      <td>75.000001</td>\n",
       "      <td>13.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>93.999999</td>\n",
       "      <td>96.999999</td>\n",
       "      <td>70.999999</td>\n",
       "      <td>-12.000001</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>8.965463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>88</td>\n",
       "      <td>6</td>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>28</td>\n",
       "      <td>False</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>#na#</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>#na#</td>\n",
       "      <td>ST</td>\n",
       "      <td>9</td>\n",
       "      <td>Rain</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>10690.000014</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.410175e-08</td>\n",
       "      <td>88.0</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>-34.000000</td>\n",
       "      <td>1.436881e-08</td>\n",
       "      <td>1.656364e-09</td>\n",
       "      <td>7.796058</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dls.show_batch()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2754ad6",
   "metadata": {
    "papermill": {
     "duration": 0.01762,
     "end_time": "2024-11-20T20:04:06.364461",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.346841",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0708ca98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:06.400753Z",
     "iopub.status.busy": "2024-11-20T20:04:06.400319Z",
     "iopub.status.idle": "2024-11-20T20:04:06.408311Z",
     "shell.execute_reply": "2024-11-20T20:04:06.407093Z"
    },
    "papermill": {
     "duration": 0.029146,
     "end_time": "2024-11-20T20:04:06.410739",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.381593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "max_log_y = np.log(1.2) + np.max(train_df['Sales'])\n",
    "y_range = (0, max_log_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "efeb794f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:06.447055Z",
     "iopub.status.busy": "2024-11-20T20:04:06.446679Z",
     "iopub.status.idle": "2024-11-20T20:04:06.451922Z",
     "shell.execute_reply": "2024-11-20T20:04:06.450657Z"
    },
    "papermill": {
     "duration": 0.025662,
     "end_time": "2024-11-20T20:04:06.454044",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.428382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dls.c = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e26e7367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:06.490266Z",
     "iopub.status.busy": "2024-11-20T20:04:06.489870Z",
     "iopub.status.idle": "2024-11-20T20:04:06.571280Z",
     "shell.execute_reply": "2024-11-20T20:04:06.570257Z"
    },
    "papermill": {
     "duration": 0.10251,
     "end_time": "2024-11-20T20:04:06.573688",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.471178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "learn = tabular_learner(dls, layers=[1000,500], loss_func=MSELossFlat(),\n",
    "                        config=tabular_config(ps=[0.001,0.01], embed_p=0.04, y_range=y_range), \n",
    "                        metrics=exp_rmspe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "241e1063",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:06.611595Z",
     "iopub.status.busy": "2024-11-20T20:04:06.611148Z",
     "iopub.status.idle": "2024-11-20T20:04:06.619041Z",
     "shell.execute_reply": "2024-11-20T20:04:06.617777Z"
    },
    "papermill": {
     "duration": 0.029969,
     "end_time": "2024-11-20T20:04:06.621312",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.591343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TabularModel(\n",
       "  (embeds): ModuleList(\n",
       "    (0): Embedding(1116, 81)\n",
       "    (1): Embedding(8, 5)\n",
       "    (2): Embedding(4, 3)\n",
       "    (3): Embedding(13, 7)\n",
       "    (4): Embedding(32, 11)\n",
       "    (5): Embedding(3, 3)\n",
       "    (6): Embedding(5, 4)\n",
       "    (7-8): 2 x Embedding(4, 3)\n",
       "    (9): Embedding(24, 9)\n",
       "    (10): Embedding(8, 5)\n",
       "    (11): Embedding(13, 7)\n",
       "    (12): Embedding(53, 15)\n",
       "    (13): Embedding(22, 9)\n",
       "    (14-15): 2 x Embedding(7, 5)\n",
       "    (16-17): 2 x Embedding(4, 3)\n",
       "    (18-19): 2 x Embedding(9, 5)\n",
       "    (20-21): 2 x Embedding(3, 3)\n",
       "  )\n",
       "  (emb_drop): Dropout(p=0.04, inplace=False)\n",
       "  (bn_cont): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "  (layers): Sequential(\n",
       "    (0): LinBnDrop(\n",
       "      (0): Linear(in_features=213, out_features=1000, bias=False)\n",
       "      (1): ReLU(inplace=True)\n",
       "      (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (3): Dropout(p=0.001, inplace=False)\n",
       "    )\n",
       "    (1): LinBnDrop(\n",
       "      (0): Linear(in_features=1000, out_features=500, bias=False)\n",
       "      (1): ReLU(inplace=True)\n",
       "      (2): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "      (3): Dropout(p=0.01, inplace=False)\n",
       "    )\n",
       "    (2): LinBnDrop(\n",
       "      (0): Linear(in_features=500, out_features=1, bias=True)\n",
       "    )\n",
       "    (3): fastai.layers.SigmoidRange(low=0, high=10.816998424176623)\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "learn.model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "4af3974b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:06.657497Z",
     "iopub.status.busy": "2024-11-20T20:04:06.656781Z",
     "iopub.status.idle": "2024-11-20T20:04:06.663814Z",
     "shell.execute_reply": "2024-11-20T20:04:06.662631Z"
    },
    "papermill": {
     "duration": 0.027472,
     "end_time": "2024-11-20T20:04:06.666013",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.638541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dls.train_ds.cont_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "cad823e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:06.703079Z",
     "iopub.status.busy": "2024-11-20T20:04:06.702247Z",
     "iopub.status.idle": "2024-11-20T20:04:12.552939Z",
     "shell.execute_reply": "2024-11-20T20:04:12.551747Z"
    },
    "papermill": {
     "duration": 5.871419,
     "end_time": "2024-11-20T20:04:12.555221",
     "exception": false,
     "start_time": "2024-11-20T20:04:06.683802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/fastai/learner.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  state = torch.load(file, map_location=device, **torch_load_kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrs = learn.lr_find(suggest_funcs=(minimum, steep, valley, slide))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ca0cde53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:12.593828Z",
     "iopub.status.busy": "2024-11-20T20:04:12.592853Z",
     "iopub.status.idle": "2024-11-20T20:04:12.880482Z",
     "shell.execute_reply": "2024-11-20T20:04:12.879291Z"
    },
    "papermill": {
     "duration": 0.309269,
     "end_time": "2024-11-20T20:04:12.882854",
     "exception": false,
     "start_time": "2024-11-20T20:04:12.573585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "dls.train.y.hist(bins=50)\n",
    "plt.title(\"Distribución del target (Sales)\")\n",
    "plt.xlabel(\"Valores del target (Sales)\")\n",
    "plt.ylabel(\"Frecuencia\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "37c97da8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:12.922628Z",
     "iopub.status.busy": "2024-11-20T20:04:12.922245Z",
     "iopub.status.idle": "2024-11-20T20:04:12.927254Z",
     "shell.execute_reply": "2024-11-20T20:04:12.926119Z"
    },
    "papermill": {
     "duration": 0.027884,
     "end_time": "2024-11-20T20:04:12.929438",
     "exception": false,
     "start_time": "2024-11-20T20:04:12.901554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "suggested_lrs = lrs.valley * 3\n",
    "suggested_lrs\n",
    "epochs=4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ede9efd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:04:12.968385Z",
     "iopub.status.busy": "2024-11-20T20:04:12.968002Z",
     "iopub.status.idle": "2024-11-20T20:08:58.758496Z",
     "shell.execute_reply": "2024-11-20T20:08:58.757322Z"
    },
    "papermill": {
     "duration": 285.812754,
     "end_time": "2024-11-20T20:08:58.760743",
     "exception": false,
     "start_time": "2024-11-20T20:04:12.947989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>_exp_rmspe</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.066076</td>\n",
       "      <td>0.195125</td>\n",
       "      <td>1.085813</td>\n",
       "      <td>01:07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.015831</td>\n",
       "      <td>0.017147</td>\n",
       "      <td>0.142560</td>\n",
       "      <td>01:10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.011263</td>\n",
       "      <td>0.013821</td>\n",
       "      <td>0.118161</td>\n",
       "      <td>01:13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.009351</td>\n",
       "      <td>0.012803</td>\n",
       "      <td>0.114205</td>\n",
       "      <td>01:13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "learn.fit_one_cycle(epochs, suggested_lrs, wd=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "a1215927",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:08:58.802250Z",
     "iopub.status.busy": "2024-11-20T20:08:58.801803Z",
     "iopub.status.idle": "2024-11-20T20:08:59.268642Z",
     "shell.execute_reply": "2024-11-20T20:08:59.267431Z"
    },
    "papermill": {
     "duration": 0.488806,
     "end_time": "2024-11-20T20:08:59.270744",
     "exception": false,
     "start_time": "2024-11-20T20:08:58.781938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'learning curve'}, xlabel='steps', ylabel='loss'>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "learn.recorder.plot_loss(skip_start=1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "298ec50e",
   "metadata": {
    "papermill": {
     "duration": 0.019754,
     "end_time": "2024-11-20T20:08:59.310342",
     "exception": false,
     "start_time": "2024-11-20T20:08:59.290588",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference on the test set ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "e9796518",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:08:59.350924Z",
     "iopub.status.busy": "2024-11-20T20:08:59.350499Z",
     "iopub.status.idle": "2024-11-20T20:08:59.419971Z",
     "shell.execute_reply": "2024-11-20T20:08:59.418819Z"
    },
    "papermill": {
     "duration": 0.09272,
     "end_time": "2024-11-20T20:08:59.422424",
     "exception": false,
     "start_time": "2024-11-20T20:08:59.329704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  to[n].fillna(self.na_dict[n], inplace=True)\n",
      "/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  to[n].fillna(self.na_dict[n], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "test_to = to.new(test_df)\n",
    "test_to.process()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c95e2cc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:08:59.462522Z",
     "iopub.status.busy": "2024-11-20T20:08:59.462118Z",
     "iopub.status.idle": "2024-11-20T20:08:59.490065Z",
     "shell.execute_reply": "2024-11-20T20:08:59.489153Z"
    },
    "papermill": {
     "duration": 0.050668,
     "end_time": "2024-11-20T20:08:59.492367",
     "exception": false,
     "start_time": "2024-11-20T20:08:59.441699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_dls = test_to.dataloaders(bs=512, path=path, shuffle_train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "b3aceecc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:08:59.532788Z",
     "iopub.status.busy": "2024-11-20T20:08:59.532421Z",
     "iopub.status.idle": "2024-11-20T20:08:59.537415Z",
     "shell.execute_reply": "2024-11-20T20:08:59.536206Z"
    },
    "papermill": {
     "duration": 0.027635,
     "end_time": "2024-11-20T20:08:59.539405",
     "exception": false,
     "start_time": "2024-11-20T20:08:59.511770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "learn.metrics=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "3d7683c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:08:59.580941Z",
     "iopub.status.busy": "2024-11-20T20:08:59.580565Z",
     "iopub.status.idle": "2024-11-20T20:09:00.786513Z",
     "shell.execute_reply": "2024-11-20T20:09:00.785562Z"
    },
    "papermill": {
     "duration": 1.229334,
     "end_time": "2024-11-20T20:09:00.789004",
     "exception": false,
     "start_time": "2024-11-20T20:08:59.559670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tst_preds,_ = learn.get_preds(dl=test_dls.train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "a9f387f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:09:00.830669Z",
     "iopub.status.busy": "2024-11-20T20:09:00.830279Z",
     "iopub.status.idle": "2024-11-20T20:09:00.837542Z",
     "shell.execute_reply": "2024-11-20T20:09:00.836565Z"
    },
    "papermill": {
     "duration": 0.030208,
     "end_time": "2024-11-20T20:09:00.839537",
     "exception": false,
     "start_time": "2024-11-20T20:09:00.809329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 41088)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(tst_preds.numpy()).T.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "891d2e30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:09:00.881843Z",
     "iopub.status.busy": "2024-11-20T20:09:00.881440Z",
     "iopub.status.idle": "2024-11-20T20:09:00.887612Z",
     "shell.execute_reply": "2024-11-20T20:09:00.886537Z"
    },
    "papermill": {
     "duration": 0.030036,
     "end_time": "2024-11-20T20:09:00.889898",
     "exception": false,
     "start_time": "2024-11-20T20:09:00.859862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df[\"Sales\"]=np.exp(tst_preds.numpy()).T[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "eb5d3030",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:09:00.931622Z",
     "iopub.status.busy": "2024-11-20T20:09:00.931212Z",
     "iopub.status.idle": "2024-11-20T20:09:00.977336Z",
     "shell.execute_reply": "2024-11-20T20:09:00.976132Z"
    },
    "papermill": {
     "duration": 0.07022,
     "end_time": "2024-11-20T20:09:00.979790",
     "exception": false,
     "start_time": "2024-11-20T20:09:00.909570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df[[\"Id\",\"Sales\"]] = test_df[[\"Id\",\"Sales\"]].astype(\"int\")\n",
    "test_df[[\"Id\",\"Sales\"]].to_csv(\"submission.csv\",index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "3aa0ae2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T20:09:01.021371Z",
     "iopub.status.busy": "2024-11-20T20:09:01.020975Z",
     "iopub.status.idle": "2024-11-20T20:09:01.033008Z",
     "shell.execute_reply": "2024-11-20T20:09:01.031882Z"
    },
    "papermill": {
     "duration": 0.035388,
     "end_time": "2024-11-20T20:09:01.035223",
     "exception": false,
     "start_time": "2024-11-20T20:09:00.999835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1017209</th>\n",
       "      <td>1</td>\n",
       "      <td>4373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017210</th>\n",
       "      <td>2</td>\n",
       "      <td>7124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017211</th>\n",
       "      <td>3</td>\n",
       "      <td>9149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017212</th>\n",
       "      <td>4</td>\n",
       "      <td>6790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017213</th>\n",
       "      <td>5</td>\n",
       "      <td>7518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1058292</th>\n",
       "      <td>41084</td>\n",
       "      <td>3186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1058293</th>\n",
       "      <td>41085</td>\n",
       "      <td>7304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1058294</th>\n",
       "      <td>41086</td>\n",
       "      <td>6098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1058295</th>\n",
       "      <td>41087</td>\n",
       "      <td>22519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1058296</th>\n",
       "      <td>41088</td>\n",
       "      <td>6830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>41088 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id  Sales\n",
       "1017209      1   4373\n",
       "1017210      2   7124\n",
       "1017211      3   9149\n",
       "1017212      4   6790\n",
       "1017213      5   7518\n",
       "...        ...    ...\n",
       "1058292  41084   3186\n",
       "1058293  41085   7304\n",
       "1058294  41086   6098\n",
       "1058295  41087  22519\n",
       "1058296  41088   6830\n",
       "\n",
       "[41088 rows x 2 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df[[\"Id\",\"Sales\"]]"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 860645,
     "sourceId": 4594,
     "sourceType": "competition"
    },
    {
     "datasetId": 6123716,
     "sourceId": 9956763,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 376.68705,
   "end_time": "2024-11-20T20:09:04.561915",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-20T20:02:47.874865",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
