{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4594,"databundleVersionId":860645,"sourceType":"competition"},{"sourceId":9956763,"sourceType":"datasetVersion","datasetId":6123716}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Rossman data preparation","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:31.048055Z","iopub.execute_input":"2024-11-20T19:29:31.050341Z","iopub.status.idle":"2024-11-20T19:29:31.072684Z","shell.execute_reply.started":"2024-11-20T19:29:31.050282Z","shell.execute_reply":"2024-11-20T19:29:31.070851Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/rossmann-additional/sample_submission.csv\n/kaggle/input/rossmann-additional/state_names.csv\n/kaggle/input/rossmann-additional/weather.csv\n/kaggle/input/rossmann-additional/googletrend.csv\n/kaggle/input/rossmann-additional/store_states.csv\n/kaggle/input/rossmann-additional/store.csv\n/kaggle/input/rossmann-additional/train.csv\n/kaggle/input/rossmann-additional/test.csv\n/kaggle/input/rossmann-store-sales/sample_submission.csv\n/kaggle/input/rossmann-store-sales/store.csv\n/kaggle/input/rossmann-store-sales/train.csv\n/kaggle/input/rossmann-store-sales/test.csv\n","output_type":"stream"}],"execution_count":629},{"cell_type":"markdown","source":"### Visualizing the data","metadata":{}},{"cell_type":"code","source":"from fastai.tabular.all import *\nfrom fastai.learner import *\nfrom fastai.vision.all import *\nimport tensorflow.keras\nimport matplotlib as plt\nimport sklearn\nimport datetime\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\nimport fastai.metrics\nimport torch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:31.076176Z","iopub.execute_input":"2024-11-20T19:29:31.076624Z","iopub.status.idle":"2024-11-20T19:29:31.088567Z","shell.execute_reply.started":"2024-11-20T19:29:31.076585Z","shell.execute_reply":"2024-11-20T19:29:31.085510Z"}},"outputs":[],"execution_count":630},{"cell_type":"code","source":"path = '/kaggle/input/rossmann-additional/'\ntable_names = ['train', 'store', 'store_states', 'state_names', 'googletrend', 'weather', 'test']\ntrain, store, store_states, state_names, googletrend, weather, test = tables  = [pd.read_csv(path + fname+'.csv',\n                                                                             low_memory=False) for fname in table_names]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:31.090576Z","iopub.execute_input":"2024-11-20T19:29:31.091118Z","iopub.status.idle":"2024-11-20T19:29:32.650328Z","shell.execute_reply.started":"2024-11-20T19:29:31.091037Z","shell.execute_reply":"2024-11-20T19:29:32.649108Z"}},"outputs":[],"execution_count":631},{"cell_type":"code","source":"len(train), len(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.653377Z","iopub.execute_input":"2024-11-20T19:29:32.653815Z","iopub.status.idle":"2024-11-20T19:29:32.664962Z","shell.execute_reply.started":"2024-11-20T19:29:32.653777Z","shell.execute_reply":"2024-11-20T19:29:32.663151Z"}},"outputs":[{"execution_count":632,"output_type":"execute_result","data":{"text/plain":"(1017209, 41088)"},"metadata":{}}],"execution_count":632},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.666760Z","iopub.execute_input":"2024-11-20T19:29:32.667210Z","iopub.status.idle":"2024-11-20T19:29:32.690316Z","shell.execute_reply.started":"2024-11-20T19:29:32.667155Z","shell.execute_reply":"2024-11-20T19:29:32.688642Z"}},"outputs":[{"execution_count":633,"output_type":"execute_result","data":{"text/plain":"   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n0      1          5  2015-07-31   5263        555     1      1            0   \n1      2          5  2015-07-31   6064        625     1      1            0   \n2      3          5  2015-07-31   8314        821     1      1            0   \n3      4          5  2015-07-31  13995       1498     1      1            0   \n4      5          5  2015-07-31   4822        559     1      1            0   \n\n   SchoolHoliday  \n0              1  \n1              1  \n2              1  \n3              1  \n4              1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Store</th>\n      <th>DayOfWeek</th>\n      <th>Date</th>\n      <th>Sales</th>\n      <th>Customers</th>\n      <th>Open</th>\n      <th>Promo</th>\n      <th>StateHoliday</th>\n      <th>SchoolHoliday</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>5</td>\n      <td>2015-07-31</td>\n      <td>5263</td>\n      <td>555</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>2015-07-31</td>\n      <td>6064</td>\n      <td>625</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>5</td>\n      <td>2015-07-31</td>\n      <td>8314</td>\n      <td>821</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>5</td>\n      <td>2015-07-31</td>\n      <td>13995</td>\n      <td>1498</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>5</td>\n      <td>2015-07-31</td>\n      <td>4822</td>\n      <td>559</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":633},{"cell_type":"code","source":"test.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.692398Z","iopub.execute_input":"2024-11-20T19:29:32.693036Z","iopub.status.idle":"2024-11-20T19:29:32.713432Z","shell.execute_reply.started":"2024-11-20T19:29:32.692976Z","shell.execute_reply":"2024-11-20T19:29:32.712196Z"}},"outputs":[{"execution_count":634,"output_type":"execute_result","data":{"text/plain":"   Id  Store  DayOfWeek        Date  Open  Promo StateHoliday  SchoolHoliday\n0   1      1          4  2015-09-17   1.0      1            0              0\n1   2      3          4  2015-09-17   1.0      1            0              0\n2   3      7          4  2015-09-17   1.0      1            0              0\n3   4      8          4  2015-09-17   1.0      1            0              0\n4   5      9          4  2015-09-17   1.0      1            0              0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>Store</th>\n      <th>DayOfWeek</th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>Promo</th>\n      <th>StateHoliday</th>\n      <th>SchoolHoliday</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2015-09-17</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>2015-09-17</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>7</td>\n      <td>4</td>\n      <td>2015-09-17</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>8</td>\n      <td>4</td>\n      <td>2015-09-17</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>9</td>\n      <td>4</td>\n      <td>2015-09-17</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":634},{"cell_type":"code","source":"store.head().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.715255Z","iopub.execute_input":"2024-11-20T19:29:32.715657Z","iopub.status.idle":"2024-11-20T19:29:32.737822Z","shell.execute_reply.started":"2024-11-20T19:29:32.715612Z","shell.execute_reply":"2024-11-20T19:29:32.736122Z"}},"outputs":[{"execution_count":635,"output_type":"execute_result","data":{"text/plain":"                                0                1                2       3  \\\nStore                           1                2                3       4   \nStoreType                       c                a                a       c   \nAssortment                      a                a                a       c   \nCompetitionDistance        1270.0            570.0          14130.0   620.0   \nCompetitionOpenSinceMonth     9.0             11.0             12.0     9.0   \nCompetitionOpenSinceYear   2008.0           2007.0           2006.0  2009.0   \nPromo2                          0                1                1       0   \nPromo2SinceWeek               NaN             13.0             14.0     NaN   \nPromo2SinceYear               NaN           2010.0           2011.0     NaN   \nPromoInterval                 NaN  Jan,Apr,Jul,Oct  Jan,Apr,Jul,Oct     NaN   \n\n                                 4  \nStore                            5  \nStoreType                        a  \nAssortment                       a  \nCompetitionDistance        29910.0  \nCompetitionOpenSinceMonth      4.0  \nCompetitionOpenSinceYear    2015.0  \nPromo2                           0  \nPromo2SinceWeek                NaN  \nPromo2SinceYear                NaN  \nPromoInterval                  NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Store</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>StoreType</th>\n      <td>c</td>\n      <td>a</td>\n      <td>a</td>\n      <td>c</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>Assortment</th>\n      <td>a</td>\n      <td>a</td>\n      <td>a</td>\n      <td>c</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>CompetitionDistance</th>\n      <td>1270.0</td>\n      <td>570.0</td>\n      <td>14130.0</td>\n      <td>620.0</td>\n      <td>29910.0</td>\n    </tr>\n    <tr>\n      <th>CompetitionOpenSinceMonth</th>\n      <td>9.0</td>\n      <td>11.0</td>\n      <td>12.0</td>\n      <td>9.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>CompetitionOpenSinceYear</th>\n      <td>2008.0</td>\n      <td>2007.0</td>\n      <td>2006.0</td>\n      <td>2009.0</td>\n      <td>2015.0</td>\n    </tr>\n    <tr>\n      <th>Promo2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Promo2SinceWeek</th>\n      <td>NaN</td>\n      <td>13.0</td>\n      <td>14.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Promo2SinceYear</th>\n      <td>NaN</td>\n      <td>2010.0</td>\n      <td>2011.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>PromoInterval</th>\n      <td>NaN</td>\n      <td>Jan,Apr,Jul,Oct</td>\n      <td>Jan,Apr,Jul,Oct</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":635},{"cell_type":"code","source":"store_states.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.739576Z","iopub.execute_input":"2024-11-20T19:29:32.740136Z","iopub.status.idle":"2024-11-20T19:29:32.760411Z","shell.execute_reply.started":"2024-11-20T19:29:32.740042Z","shell.execute_reply":"2024-11-20T19:29:32.758288Z"}},"outputs":[{"execution_count":636,"output_type":"execute_result","data":{"text/plain":"   Store State\n0      1    HE\n1      2    TH\n2      3    NW\n3      4    BE\n4      5    SN","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Store</th>\n      <th>State</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>HE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>TH</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>NW</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>BE</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>SN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":636},{"cell_type":"code","source":"state_names.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.761872Z","iopub.execute_input":"2024-11-20T19:29:32.762411Z","iopub.status.idle":"2024-11-20T19:29:32.787405Z","shell.execute_reply.started":"2024-11-20T19:29:32.762338Z","shell.execute_reply":"2024-11-20T19:29:32.785741Z"}},"outputs":[{"execution_count":637,"output_type":"execute_result","data":{"text/plain":"           StateName State\n0  BadenWuerttemberg    BW\n1             Bayern    BY\n2             Berlin    BE\n3        Brandenburg    BB\n4             Bremen    HB","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>StateName</th>\n      <th>State</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>BadenWuerttemberg</td>\n      <td>BW</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bayern</td>\n      <td>BY</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Berlin</td>\n      <td>BE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Brandenburg</td>\n      <td>BB</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bremen</td>\n      <td>HB</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":637},{"cell_type":"code","source":"weather.head().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.793057Z","iopub.execute_input":"2024-11-20T19:29:32.793709Z","iopub.status.idle":"2024-11-20T19:29:32.821592Z","shell.execute_reply.started":"2024-11-20T19:29:32.793660Z","shell.execute_reply":"2024-11-20T19:29:32.819517Z"}},"outputs":[{"execution_count":638,"output_type":"execute_result","data":{"text/plain":"                                             0                   1  \\\nfile                        NordrheinWestfalen  NordrheinWestfalen   \nDate                                2013-01-01          2013-01-02   \nMax_TemperatureC                             8                   7   \nMean_TemperatureC                            4                   4   \nMin_TemperatureC                             2                   1   \nDew_PointC                                   7                   5   \nMeanDew_PointC                               5                   3   \nMin_DewpointC                                1                   2   \nMax_Humidity                                94                  93   \nMean_Humidity                               87                  85   \nMin_Humidity                                65                  78   \nMax_Sea_Level_PressurehPa                 1013                1028   \nMean_Sea_Level_PressurehPa                1005                1022   \nMin_Sea_Level_PressurehPa                 1001                1014   \nMax_VisibilityKm                          31.0                31.0   \nMean_VisibilityKm                         12.0                14.0   \nMin_VisibilitykM                           4.0                10.0   \nMax_Wind_SpeedKm_h                          39                  24   \nMean_Wind_SpeedKm_h                         26                  16   \nMax_Gust_SpeedKm_h                        58.0                 NaN   \nPrecipitationmm                           5.08                 0.0   \nCloudCover                                 6.0                 6.0   \nEvents                                    Rain                Rain   \nWindDirDegrees                             215                 225   \n\n                                             2                   3  \\\nfile                        NordrheinWestfalen  NordrheinWestfalen   \nDate                                2013-01-03          2013-01-04   \nMax_TemperatureC                            11                   9   \nMean_TemperatureC                            8                   9   \nMin_TemperatureC                             6                   8   \nDew_PointC                                  10                   9   \nMeanDew_PointC                               8                   9   \nMin_DewpointC                                4                   8   \nMax_Humidity                               100                 100   \nMean_Humidity                               93                  94   \nMin_Humidity                                77                  87   \nMax_Sea_Level_PressurehPa                 1035                1036   \nMean_Sea_Level_PressurehPa                1030                1035   \nMin_Sea_Level_PressurehPa                 1026                1034   \nMax_VisibilityKm                          31.0                11.0   \nMean_VisibilityKm                          8.0                 5.0   \nMin_VisibilitykM                           2.0                 2.0   \nMax_Wind_SpeedKm_h                          26                  23   \nMean_Wind_SpeedKm_h                         21                  14   \nMax_Gust_SpeedKm_h                         NaN                 NaN   \nPrecipitationmm                           1.02                0.25   \nCloudCover                                 7.0                 7.0   \nEvents                                    Rain                Rain   \nWindDirDegrees                             240                 263   \n\n                                             4  \nfile                        NordrheinWestfalen  \nDate                                2013-01-05  \nMax_TemperatureC                             8  \nMean_TemperatureC                            8  \nMin_TemperatureC                             7  \nDew_PointC                                   8  \nMeanDew_PointC                               7  \nMin_DewpointC                                6  \nMax_Humidity                               100  \nMean_Humidity                               94  \nMin_Humidity                                87  \nMax_Sea_Level_PressurehPa                 1035  \nMean_Sea_Level_PressurehPa                1034  \nMin_Sea_Level_PressurehPa                 1033  \nMax_VisibilityKm                          10.0  \nMean_VisibilityKm                          6.0  \nMin_VisibilitykM                           3.0  \nMax_Wind_SpeedKm_h                          16  \nMean_Wind_SpeedKm_h                         10  \nMax_Gust_SpeedKm_h                         NaN  \nPrecipitationmm                            0.0  \nCloudCover                                 7.0  \nEvents                                    Rain  \nWindDirDegrees                             268  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>file</th>\n      <td>NordrheinWestfalen</td>\n      <td>NordrheinWestfalen</td>\n      <td>NordrheinWestfalen</td>\n      <td>NordrheinWestfalen</td>\n      <td>NordrheinWestfalen</td>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <td>2013-01-01</td>\n      <td>2013-01-02</td>\n      <td>2013-01-03</td>\n      <td>2013-01-04</td>\n      <td>2013-01-05</td>\n    </tr>\n    <tr>\n      <th>Max_TemperatureC</th>\n      <td>8</td>\n      <td>7</td>\n      <td>11</td>\n      <td>9</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>Mean_TemperatureC</th>\n      <td>4</td>\n      <td>4</td>\n      <td>8</td>\n      <td>9</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>Min_TemperatureC</th>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>8</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Dew_PointC</th>\n      <td>7</td>\n      <td>5</td>\n      <td>10</td>\n      <td>9</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>MeanDew_PointC</th>\n      <td>5</td>\n      <td>3</td>\n      <td>8</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Min_DewpointC</th>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n      <td>8</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Max_Humidity</th>\n      <td>94</td>\n      <td>93</td>\n      <td>100</td>\n      <td>100</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>Mean_Humidity</th>\n      <td>87</td>\n      <td>85</td>\n      <td>93</td>\n      <td>94</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>Min_Humidity</th>\n      <td>65</td>\n      <td>78</td>\n      <td>77</td>\n      <td>87</td>\n      <td>87</td>\n    </tr>\n    <tr>\n      <th>Max_Sea_Level_PressurehPa</th>\n      <td>1013</td>\n      <td>1028</td>\n      <td>1035</td>\n      <td>1036</td>\n      <td>1035</td>\n    </tr>\n    <tr>\n      <th>Mean_Sea_Level_PressurehPa</th>\n      <td>1005</td>\n      <td>1022</td>\n      <td>1030</td>\n      <td>1035</td>\n      <td>1034</td>\n    </tr>\n    <tr>\n      <th>Min_Sea_Level_PressurehPa</th>\n      <td>1001</td>\n      <td>1014</td>\n      <td>1026</td>\n      <td>1034</td>\n      <td>1033</td>\n    </tr>\n    <tr>\n      <th>Max_VisibilityKm</th>\n      <td>31.0</td>\n      <td>31.0</td>\n      <td>31.0</td>\n      <td>11.0</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>Mean_VisibilityKm</th>\n      <td>12.0</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>5.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>Min_VisibilitykM</th>\n      <td>4.0</td>\n      <td>10.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Max_Wind_SpeedKm_h</th>\n      <td>39</td>\n      <td>24</td>\n      <td>26</td>\n      <td>23</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>Mean_Wind_SpeedKm_h</th>\n      <td>26</td>\n      <td>16</td>\n      <td>21</td>\n      <td>14</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>Max_Gust_SpeedKm_h</th>\n      <td>58.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Precipitationmm</th>\n      <td>5.08</td>\n      <td>0.0</td>\n      <td>1.02</td>\n      <td>0.25</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>CloudCover</th>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>7.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>Events</th>\n      <td>Rain</td>\n      <td>Rain</td>\n      <td>Rain</td>\n      <td>Rain</td>\n      <td>Rain</td>\n    </tr>\n    <tr>\n      <th>WindDirDegrees</th>\n      <td>215</td>\n      <td>225</td>\n      <td>240</td>\n      <td>263</td>\n      <td>268</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":638},{"cell_type":"code","source":"googletrend.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.824009Z","iopub.execute_input":"2024-11-20T19:29:32.824541Z","iopub.status.idle":"2024-11-20T19:29:32.843997Z","shell.execute_reply.started":"2024-11-20T19:29:32.824500Z","shell.execute_reply":"2024-11-20T19:29:32.842606Z"}},"outputs":[{"execution_count":639,"output_type":"execute_result","data":{"text/plain":"             file                     week  trend\n0  Rossmann_DE_SN  2012-12-02 - 2012-12-08     96\n1  Rossmann_DE_SN  2012-12-09 - 2012-12-15     95\n2  Rossmann_DE_SN  2012-12-16 - 2012-12-22     91\n3  Rossmann_DE_SN  2012-12-23 - 2012-12-29     48\n4  Rossmann_DE_SN  2012-12-30 - 2013-01-05     67","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file</th>\n      <th>week</th>\n      <th>trend</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-02 - 2012-12-08</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-09 - 2012-12-15</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-16 - 2012-12-22</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-23 - 2012-12-29</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-30 - 2013-01-05</td>\n      <td>67</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":639},{"cell_type":"markdown","source":"### Feature Engineering","metadata":{}},{"cell_type":"markdown","source":"#### Merging tables","metadata":{}},{"cell_type":"code","source":"def join_df(left, right, left_on, right_on=None, suffix='_y'):\n    if right_on is None: right_on = left_on\n    return left.merge(right, how='left', left_on=left_on, right_on=right_on, \n                      suffixes=(\"\", suffix))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.847034Z","iopub.execute_input":"2024-11-20T19:29:32.847604Z","iopub.status.idle":"2024-11-20T19:29:32.862244Z","shell.execute_reply.started":"2024-11-20T19:29:32.847560Z","shell.execute_reply":"2024-11-20T19:29:32.860881Z"}},"outputs":[],"execution_count":640},{"cell_type":"code","source":"weather = join_df(weather, state_names, \"file\", \"StateName\")\nweather[['file', 'Date', 'State', 'StateName']].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.864480Z","iopub.execute_input":"2024-11-20T19:29:32.864937Z","iopub.status.idle":"2024-11-20T19:29:32.907857Z","shell.execute_reply.started":"2024-11-20T19:29:32.864858Z","shell.execute_reply":"2024-11-20T19:29:32.906485Z"}},"outputs":[{"execution_count":641,"output_type":"execute_result","data":{"text/plain":"                 file        Date State           StateName\n0  NordrheinWestfalen  2013-01-01    NW  NordrheinWestfalen\n1  NordrheinWestfalen  2013-01-02    NW  NordrheinWestfalen\n2  NordrheinWestfalen  2013-01-03    NW  NordrheinWestfalen\n3  NordrheinWestfalen  2013-01-04    NW  NordrheinWestfalen\n4  NordrheinWestfalen  2013-01-05    NW  NordrheinWestfalen","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file</th>\n      <th>Date</th>\n      <th>State</th>\n      <th>StateName</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NordrheinWestfalen</td>\n      <td>2013-01-01</td>\n      <td>NW</td>\n      <td>NordrheinWestfalen</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NordrheinWestfalen</td>\n      <td>2013-01-02</td>\n      <td>NW</td>\n      <td>NordrheinWestfalen</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NordrheinWestfalen</td>\n      <td>2013-01-03</td>\n      <td>NW</td>\n      <td>NordrheinWestfalen</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NordrheinWestfalen</td>\n      <td>2013-01-04</td>\n      <td>NW</td>\n      <td>NordrheinWestfalen</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NordrheinWestfalen</td>\n      <td>2013-01-05</td>\n      <td>NW</td>\n      <td>NordrheinWestfalen</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":641},{"cell_type":"code","source":"len(weather[weather.State.isnull()])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.909441Z","iopub.execute_input":"2024-11-20T19:29:32.909825Z","iopub.status.idle":"2024-11-20T19:29:32.928847Z","shell.execute_reply.started":"2024-11-20T19:29:32.909783Z","shell.execute_reply":"2024-11-20T19:29:32.927379Z"}},"outputs":[{"execution_count":642,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":642},{"cell_type":"code","source":"weather.drop(columns=['file', 'StateName'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.930876Z","iopub.execute_input":"2024-11-20T19:29:32.931590Z","iopub.status.idle":"2024-11-20T19:29:32.950925Z","shell.execute_reply.started":"2024-11-20T19:29:32.931323Z","shell.execute_reply":"2024-11-20T19:29:32.949441Z"}},"outputs":[],"execution_count":643},{"cell_type":"code","source":"store = join_df(store, store_states, 'Store')\nstore = join_df(store, weather, 'State')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:32.953014Z","iopub.execute_input":"2024-11-20T19:29:32.954291Z","iopub.status.idle":"2024-11-20T19:29:33.429866Z","shell.execute_reply.started":"2024-11-20T19:29:32.954228Z","shell.execute_reply":"2024-11-20T19:29:33.428569Z"}},"outputs":[],"execution_count":644},{"cell_type":"code","source":"len(store[store.Mean_TemperatureC.isnull()])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.431565Z","iopub.execute_input":"2024-11-20T19:29:33.431939Z","iopub.status.idle":"2024-11-20T19:29:33.443049Z","shell.execute_reply.started":"2024-11-20T19:29:33.431902Z","shell.execute_reply":"2024-11-20T19:29:33.441701Z"}},"outputs":[{"execution_count":645,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":645},{"cell_type":"code","source":"googletrend.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.444676Z","iopub.execute_input":"2024-11-20T19:29:33.445178Z","iopub.status.idle":"2024-11-20T19:29:33.462038Z","shell.execute_reply.started":"2024-11-20T19:29:33.445126Z","shell.execute_reply":"2024-11-20T19:29:33.460626Z"}},"outputs":[{"execution_count":646,"output_type":"execute_result","data":{"text/plain":"             file                     week  trend\n0  Rossmann_DE_SN  2012-12-02 - 2012-12-08     96\n1  Rossmann_DE_SN  2012-12-09 - 2012-12-15     95\n2  Rossmann_DE_SN  2012-12-16 - 2012-12-22     91\n3  Rossmann_DE_SN  2012-12-23 - 2012-12-29     48\n4  Rossmann_DE_SN  2012-12-30 - 2013-01-05     67","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file</th>\n      <th>week</th>\n      <th>trend</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-02 - 2012-12-08</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-09 - 2012-12-15</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-16 - 2012-12-22</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-23 - 2012-12-29</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-30 - 2013-01-05</td>\n      <td>67</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":646},{"cell_type":"code","source":"googletrend['Date'] = googletrend.week.str.split(' - ', expand=True)[0]\ngoogletrend['State'] = googletrend.file.str.split('_', expand=True)[2]\ngoogletrend.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.463736Z","iopub.execute_input":"2024-11-20T19:29:33.464263Z","iopub.status.idle":"2024-11-20T19:29:33.492292Z","shell.execute_reply.started":"2024-11-20T19:29:33.464222Z","shell.execute_reply":"2024-11-20T19:29:33.490919Z"}},"outputs":[{"execution_count":647,"output_type":"execute_result","data":{"text/plain":"             file                     week  trend        Date State\n0  Rossmann_DE_SN  2012-12-02 - 2012-12-08     96  2012-12-02    SN\n1  Rossmann_DE_SN  2012-12-09 - 2012-12-15     95  2012-12-09    SN\n2  Rossmann_DE_SN  2012-12-16 - 2012-12-22     91  2012-12-16    SN\n3  Rossmann_DE_SN  2012-12-23 - 2012-12-29     48  2012-12-23    SN\n4  Rossmann_DE_SN  2012-12-30 - 2013-01-05     67  2012-12-30    SN","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>file</th>\n      <th>week</th>\n      <th>trend</th>\n      <th>Date</th>\n      <th>State</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-02 - 2012-12-08</td>\n      <td>96</td>\n      <td>2012-12-02</td>\n      <td>SN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-09 - 2012-12-15</td>\n      <td>95</td>\n      <td>2012-12-09</td>\n      <td>SN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-16 - 2012-12-22</td>\n      <td>91</td>\n      <td>2012-12-16</td>\n      <td>SN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-23 - 2012-12-29</td>\n      <td>48</td>\n      <td>2012-12-23</td>\n      <td>SN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Rossmann_DE_SN</td>\n      <td>2012-12-30 - 2013-01-05</td>\n      <td>67</td>\n      <td>2012-12-30</td>\n      <td>SN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":647},{"cell_type":"code","source":"store['State'].unique(),googletrend['State'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.493957Z","iopub.execute_input":"2024-11-20T19:29:33.494454Z","iopub.status.idle":"2024-11-20T19:29:33.559611Z","shell.execute_reply.started":"2024-11-20T19:29:33.494403Z","shell.execute_reply":"2024-11-20T19:29:33.558313Z"}},"outputs":[{"execution_count":648,"output_type":"execute_result","data":{"text/plain":"(array(['HE', 'TH', 'NW', 'BE', 'SN', 'SH', 'HB,NI', 'BY', 'BW', 'RP',\n        'ST', 'HH'], dtype=object),\n array(['SN', None, 'BY', 'TH', 'NW', 'BE', 'RP', 'BW', 'NI', 'SH', 'HE',\n        'ST', 'HH', 'SL'], dtype=object))"},"metadata":{}}],"execution_count":648},{"cell_type":"code","source":"googletrend.loc[googletrend.State=='NI', \"State\"] = 'HB,NI'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.560959Z","iopub.execute_input":"2024-11-20T19:29:33.561300Z","iopub.status.idle":"2024-11-20T19:29:33.571209Z","shell.execute_reply.started":"2024-11-20T19:29:33.561266Z","shell.execute_reply":"2024-11-20T19:29:33.569926Z"}},"outputs":[],"execution_count":649},{"cell_type":"code","source":"trend_de = googletrend[googletrend.file == 'Rossmann_DE'][['Date', 'trend']]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.573825Z","iopub.execute_input":"2024-11-20T19:29:33.574253Z","iopub.status.idle":"2024-11-20T19:29:33.592459Z","shell.execute_reply.started":"2024-11-20T19:29:33.574215Z","shell.execute_reply":"2024-11-20T19:29:33.590967Z"}},"outputs":[],"execution_count":650},{"cell_type":"code","source":"googletrend = join_df(googletrend, trend_de, 'Date', suffix='_DE')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.594223Z","iopub.execute_input":"2024-11-20T19:29:33.594688Z","iopub.status.idle":"2024-11-20T19:29:33.614067Z","shell.execute_reply.started":"2024-11-20T19:29:33.594636Z","shell.execute_reply":"2024-11-20T19:29:33.612696Z"}},"outputs":[],"execution_count":651},{"cell_type":"code","source":"googletrend.drop(columns=['file', 'week'], axis=1, inplace=True)\ngoogletrend = googletrend[~googletrend['State'].isnull()]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.615629Z","iopub.execute_input":"2024-11-20T19:29:33.616880Z","iopub.status.idle":"2024-11-20T19:29:33.630925Z","shell.execute_reply.started":"2024-11-20T19:29:33.616839Z","shell.execute_reply":"2024-11-20T19:29:33.629905Z"}},"outputs":[],"execution_count":652},{"cell_type":"markdown","source":"#### Adding dateparts","metadata":{}},{"cell_type":"code","source":"googletrend.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.632514Z","iopub.execute_input":"2024-11-20T19:29:33.632986Z","iopub.status.idle":"2024-11-20T19:29:33.653828Z","shell.execute_reply.started":"2024-11-20T19:29:33.632935Z","shell.execute_reply":"2024-11-20T19:29:33.652178Z"}},"outputs":[{"execution_count":653,"output_type":"execute_result","data":{"text/plain":"   trend        Date State  trend_DE\n0     96  2012-12-02    SN        77\n1     95  2012-12-09    SN        76\n2     91  2012-12-16    SN        85\n3     48  2012-12-23    SN        59\n4     67  2012-12-30    SN        61","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>trend</th>\n      <th>Date</th>\n      <th>State</th>\n      <th>trend_DE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>96</td>\n      <td>2012-12-02</td>\n      <td>SN</td>\n      <td>77</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>95</td>\n      <td>2012-12-09</td>\n      <td>SN</td>\n      <td>76</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>91</td>\n      <td>2012-12-16</td>\n      <td>SN</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>48</td>\n      <td>2012-12-23</td>\n      <td>SN</td>\n      <td>59</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>67</td>\n      <td>2012-12-30</td>\n      <td>SN</td>\n      <td>61</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":653},{"cell_type":"code","source":"googletrend = add_datepart(googletrend, 'Date', drop=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.655720Z","iopub.execute_input":"2024-11-20T19:29:33.656449Z","iopub.status.idle":"2024-11-20T19:29:33.713838Z","shell.execute_reply.started":"2024-11-20T19:29:33.656389Z","shell.execute_reply":"2024-11-20T19:29:33.712327Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n","output_type":"stream"}],"execution_count":654},{"cell_type":"code","source":"googletrend.head().T","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.715479Z","iopub.execute_input":"2024-11-20T19:29:33.715866Z","iopub.status.idle":"2024-11-20T19:29:33.741954Z","shell.execute_reply.started":"2024-11-20T19:29:33.715789Z","shell.execute_reply":"2024-11-20T19:29:33.740608Z"}},"outputs":[{"execution_count":655,"output_type":"execute_result","data":{"text/plain":"                                    0                    1  \\\ntrend                              96                   95   \nDate              2012-12-02 00:00:00  2012-12-09 00:00:00   \nState                              SN                   SN   \ntrend_DE                           77                   76   \nYear                             2012                 2012   \nMonth                              12                   12   \nWeek                               48                   49   \nDay                                 2                    9   \nDayofweek                           6                    6   \nDayofyear                         337                  344   \nIs_month_end                    False                False   \nIs_month_start                  False                False   \nIs_quarter_end                  False                False   \nIs_quarter_start                False                False   \nIs_year_end                     False                False   \nIs_year_start                   False                False   \nElapsed                  1354406400.0         1355011200.0   \n\n                                    2                    3  \\\ntrend                              91                   48   \nDate              2012-12-16 00:00:00  2012-12-23 00:00:00   \nState                              SN                   SN   \ntrend_DE                           85                   59   \nYear                             2012                 2012   \nMonth                              12                   12   \nWeek                               50                   51   \nDay                                16                   23   \nDayofweek                           6                    6   \nDayofyear                         351                  358   \nIs_month_end                    False                False   \nIs_month_start                  False                False   \nIs_quarter_end                  False                False   \nIs_quarter_start                False                False   \nIs_year_end                     False                False   \nIs_year_start                   False                False   \nElapsed                  1355616000.0         1356220800.0   \n\n                                    4  \ntrend                              67  \nDate              2012-12-30 00:00:00  \nState                              SN  \ntrend_DE                           61  \nYear                             2012  \nMonth                              12  \nWeek                               52  \nDay                                30  \nDayofweek                           6  \nDayofyear                         365  \nIs_month_end                    False  \nIs_month_start                  False  \nIs_quarter_end                  False  \nIs_quarter_start                False  \nIs_year_end                     False  \nIs_year_start                   False  \nElapsed                  1356825600.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>trend</th>\n      <td>96</td>\n      <td>95</td>\n      <td>91</td>\n      <td>48</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <td>2012-12-02 00:00:00</td>\n      <td>2012-12-09 00:00:00</td>\n      <td>2012-12-16 00:00:00</td>\n      <td>2012-12-23 00:00:00</td>\n      <td>2012-12-30 00:00:00</td>\n    </tr>\n    <tr>\n      <th>State</th>\n      <td>SN</td>\n      <td>SN</td>\n      <td>SN</td>\n      <td>SN</td>\n      <td>SN</td>\n    </tr>\n    <tr>\n      <th>trend_DE</th>\n      <td>77</td>\n      <td>76</td>\n      <td>85</td>\n      <td>59</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>Year</th>\n      <td>2012</td>\n      <td>2012</td>\n      <td>2012</td>\n      <td>2012</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>Month</th>\n      <td>12</td>\n      <td>12</td>\n      <td>12</td>\n      <td>12</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>Week</th>\n      <td>48</td>\n      <td>49</td>\n      <td>50</td>\n      <td>51</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>Day</th>\n      <td>2</td>\n      <td>9</td>\n      <td>16</td>\n      <td>23</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>Dayofweek</th>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Dayofyear</th>\n      <td>337</td>\n      <td>344</td>\n      <td>351</td>\n      <td>358</td>\n      <td>365</td>\n    </tr>\n    <tr>\n      <th>Is_month_end</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Is_month_start</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Is_quarter_end</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Is_quarter_start</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Is_year_end</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Is_year_start</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>Elapsed</th>\n      <td>1354406400.0</td>\n      <td>1355011200.0</td>\n      <td>1355616000.0</td>\n      <td>1356220800.0</td>\n      <td>1356825600.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":655},{"cell_type":"code","source":"googletrend = googletrend[['trend', 'State', 'trend_DE', 'Week', 'Year']]\nstore = add_datepart(store, 'Date', drop=False)\nstore = join_df(store, googletrend, ['Week', 'Year', 'State'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:33.750812Z","iopub.execute_input":"2024-11-20T19:29:33.751254Z","iopub.status.idle":"2024-11-20T19:29:35.105011Z","shell.execute_reply.started":"2024-11-20T19:29:33.751217Z","shell.execute_reply":"2024-11-20T19:29:35.102899Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n","output_type":"stream"}],"execution_count":656},{"cell_type":"code","source":"make_date(train, 'Date')\nmake_date(test, 'Date')\ntrain_fe = join_df(train, store, ['Store', 'Date'])\ntest_fe = join_df(test, store, ['Store', 'Date'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:35.107657Z","iopub.execute_input":"2024-11-20T19:29:35.108087Z","iopub.status.idle":"2024-11-20T19:29:36.539977Z","shell.execute_reply.started":"2024-11-20T19:29:35.108033Z","shell.execute_reply":"2024-11-20T19:29:36.538341Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:25: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  df[date_field] = pd.to_datetime(df[date_field], infer_datetime_format=True)\n","output_type":"stream"}],"execution_count":657},{"cell_type":"markdown","source":"#### Elapsed times","metadata":{}},{"cell_type":"code","source":"all_ftrs = pd.concat([train_fe, test_fe], axis=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:36.550797Z","iopub.execute_input":"2024-11-20T19:29:36.551181Z","iopub.status.idle":"2024-11-20T19:29:36.693429Z","shell.execute_reply.started":"2024-11-20T19:29:36.551134Z","shell.execute_reply":"2024-11-20T19:29:36.692136Z"}},"outputs":[],"execution_count":659},{"cell_type":"code","source":"all_ftrs['StateHoliday'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:36.695048Z","iopub.execute_input":"2024-11-20T19:29:36.695467Z","iopub.status.idle":"2024-11-20T19:29:36.751873Z","shell.execute_reply.started":"2024-11-20T19:29:36.695430Z","shell.execute_reply":"2024-11-20T19:29:36.749439Z"}},"outputs":[{"execution_count":660,"output_type":"execute_result","data":{"text/plain":"array(['0', 'a', 'b', 'c'], dtype=object)"},"metadata":{}}],"execution_count":660},{"cell_type":"code","source":"all_ftrs.StateHoliday = all_ftrs.StateHoliday!='0'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:36.753833Z","iopub.execute_input":"2024-11-20T19:29:36.754279Z","iopub.status.idle":"2024-11-20T19:29:36.834400Z","shell.execute_reply.started":"2024-11-20T19:29:36.754241Z","shell.execute_reply":"2024-11-20T19:29:36.832940Z"}},"outputs":[],"execution_count":661},{"cell_type":"code","source":"all_ftrs = add_elapsed_times(all_ftrs, ['Promo', 'StateHoliday', 'SchoolHoliday'], \n                             date_field='Date', base_field='Store')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:29:36.835955Z","iopub.execute_input":"2024-11-20T19:29:36.836366Z","iopub.status.idle":"2024-11-20T19:30:15.598799Z","shell.execute_reply.started":"2024-11-20T19:29:36.836329Z","shell.execute_reply":"2024-11-20T19:30:15.597311Z"}},"outputs":[],"execution_count":662},{"cell_type":"code","source":"[c for c in all_ftrs.columns if 'StateHoliday' in c]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.601266Z","iopub.execute_input":"2024-11-20T19:30:15.602042Z","iopub.status.idle":"2024-11-20T19:30:15.611925Z","shell.execute_reply.started":"2024-11-20T19:30:15.601992Z","shell.execute_reply":"2024-11-20T19:30:15.610232Z"}},"outputs":[{"execution_count":663,"output_type":"execute_result","data":{"text/plain":"['StateHoliday',\n 'AfterStateHoliday',\n 'BeforeStateHoliday',\n 'StateHoliday_bw',\n 'StateHoliday_fw']"},"metadata":{}}],"execution_count":663},{"cell_type":"code","source":"train_df = all_ftrs.iloc[:len(train_fe)]\ntest_df  = all_ftrs.iloc[len(train_fe):]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.614160Z","iopub.execute_input":"2024-11-20T19:30:15.614658Z","iopub.status.idle":"2024-11-20T19:30:15.628821Z","shell.execute_reply.started":"2024-11-20T19:30:15.614620Z","shell.execute_reply":"2024-11-20T19:30:15.627355Z"}},"outputs":[],"execution_count":664},{"cell_type":"code","source":"train_df = train_df[train_df.Sales != 0.]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.630715Z","iopub.execute_input":"2024-11-20T19:30:15.631226Z","iopub.status.idle":"2024-11-20T19:30:15.838536Z","shell.execute_reply.started":"2024-11-20T19:30:15.631168Z","shell.execute_reply":"2024-11-20T19:30:15.837289Z"}},"outputs":[],"execution_count":665},{"cell_type":"code","source":"train_clean = train_df\ntest_clean = test_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.839900Z","iopub.execute_input":"2024-11-20T19:30:15.840326Z","iopub.status.idle":"2024-11-20T19:30:15.855667Z","shell.execute_reply.started":"2024-11-20T19:30:15.840290Z","shell.execute_reply":"2024-11-20T19:30:15.854029Z"}},"outputs":[],"execution_count":666},{"cell_type":"markdown","source":"## Preparing full data set ##","metadata":{}},{"cell_type":"code","source":"train_df = train_clean\ntest_df =test_clean","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.857417Z","iopub.execute_input":"2024-11-20T19:30:15.857801Z","iopub.status.idle":"2024-11-20T19:30:15.879461Z","shell.execute_reply.started":"2024-11-20T19:30:15.857766Z","shell.execute_reply":"2024-11-20T19:30:15.878049Z"}},"outputs":[],"execution_count":667},{"cell_type":"code","source":"len(train_df),len(test_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.880928Z","iopub.execute_input":"2024-11-20T19:30:15.881325Z","iopub.status.idle":"2024-11-20T19:30:15.899848Z","shell.execute_reply.started":"2024-11-20T19:30:15.881289Z","shell.execute_reply":"2024-11-20T19:30:15.898394Z"}},"outputs":[{"execution_count":668,"output_type":"execute_result","data":{"text/plain":"(844338, 41088)"},"metadata":{}}],"execution_count":668},{"cell_type":"code","source":"procs=[FillMissing, Categorify, Normalize]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.901736Z","iopub.execute_input":"2024-11-20T19:30:15.902557Z","iopub.status.idle":"2024-11-20T19:30:15.913917Z","shell.execute_reply.started":"2024-11-20T19:30:15.902492Z","shell.execute_reply":"2024-11-20T19:30:15.912188Z"}},"outputs":[],"execution_count":669},{"cell_type":"code","source":"dep_var = 'Sales'\ncat_names = ['Store', 'DayOfWeek', 'Year', 'Month', 'Day', 'StateHoliday', 'StoreType', 'Assortment', \n    'PromoInterval', 'CompetitionOpenSinceYear', 'Promo2SinceYear', 'State', 'Week', 'Events', 'Promo_fw', \n    'Promo_bw', 'StateHoliday_fw', 'StateHoliday_bw', 'SchoolHoliday_fw', 'SchoolHoliday_bw']\n\ncont_names = ['CompetitionDistance', 'Max_TemperatureC', 'Mean_TemperatureC', 'Min_TemperatureC', \n    'Max_Humidity', 'Mean_Humidity', 'Min_Humidity', 'Max_Wind_SpeedKm_h', 'Mean_Wind_SpeedKm_h', \n    'CloudCover', 'trend', 'trend_DE', 'AfterStateHoliday', 'BeforeStateHoliday', 'Promo', 'SchoolHoliday']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.915501Z","iopub.execute_input":"2024-11-20T19:30:15.915847Z","iopub.status.idle":"2024-11-20T19:30:15.932757Z","shell.execute_reply.started":"2024-11-20T19:30:15.915813Z","shell.execute_reply":"2024-11-20T19:30:15.931467Z"}},"outputs":[],"execution_count":670},{"cell_type":"code","source":"dep_var = 'Sales'\ndf = train_df[cat_names + cont_names + [dep_var,'Date']].copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:15.934572Z","iopub.execute_input":"2024-11-20T19:30:15.934944Z","iopub.status.idle":"2024-11-20T19:30:16.308009Z","shell.execute_reply.started":"2024-11-20T19:30:15.934908Z","shell.execute_reply":"2024-11-20T19:30:16.305833Z"}},"outputs":[],"execution_count":671},{"cell_type":"code","source":"test_df['Date'].min(), test_df['Date'].max()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.310164Z","iopub.execute_input":"2024-11-20T19:30:16.310668Z","iopub.status.idle":"2024-11-20T19:30:16.325222Z","shell.execute_reply.started":"2024-11-20T19:30:16.310626Z","shell.execute_reply":"2024-11-20T19:30:16.323792Z"}},"outputs":[{"execution_count":672,"output_type":"execute_result","data":{"text/plain":"(Timestamp('2015-08-01 00:00:00'), Timestamp('2015-09-17 00:00:00'))"},"metadata":{}}],"execution_count":672},{"cell_type":"code","source":"cut = train_df['Date'][(train_df['Date'] == train_df['Date'][len(test_df)])].index.max()\ncut","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.327807Z","iopub.execute_input":"2024-11-20T19:30:16.328518Z","iopub.status.idle":"2024-11-20T19:30:16.368648Z","shell.execute_reply.started":"2024-11-20T19:30:16.328285Z","shell.execute_reply":"2024-11-20T19:30:16.366988Z"}},"outputs":[{"execution_count":673,"output_type":"execute_result","data":{"text/plain":"41254"},"metadata":{}}],"execution_count":673},{"cell_type":"code","source":"splits = (list(range(cut, len(train_df))),list(range(cut)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.370442Z","iopub.execute_input":"2024-11-20T19:30:16.371595Z","iopub.status.idle":"2024-11-20T19:30:16.423381Z","shell.execute_reply.started":"2024-11-20T19:30:16.371533Z","shell.execute_reply":"2024-11-20T19:30:16.421855Z"}},"outputs":[],"execution_count":674},{"cell_type":"code","source":"train_df[dep_var].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.425206Z","iopub.execute_input":"2024-11-20T19:30:16.425722Z","iopub.status.idle":"2024-11-20T19:30:16.445987Z","shell.execute_reply.started":"2024-11-20T19:30:16.425669Z","shell.execute_reply":"2024-11-20T19:30:16.444667Z"}},"outputs":[{"execution_count":675,"output_type":"execute_result","data":{"text/plain":"0     5263.0\n1     6064.0\n2     8314.0\n3    13995.0\n4     4822.0\nName: Sales, dtype: float64"},"metadata":{}}],"execution_count":675},{"cell_type":"code","source":"train_df[dep_var] = np.log(train_df[dep_var])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.448389Z","iopub.execute_input":"2024-11-20T19:30:16.448917Z","iopub.status.idle":"2024-11-20T19:30:16.474779Z","shell.execute_reply.started":"2024-11-20T19:30:16.448864Z","shell.execute_reply":"2024-11-20T19:30:16.473343Z"}},"outputs":[],"execution_count":676},{"cell_type":"code","source":"test_df = test_df.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.476287Z","iopub.execute_input":"2024-11-20T19:30:16.476639Z","iopub.status.idle":"2024-11-20T19:30:16.498375Z","shell.execute_reply.started":"2024-11-20T19:30:16.476602Z","shell.execute_reply":"2024-11-20T19:30:16.496579Z"}},"outputs":[],"execution_count":677},{"cell_type":"code","source":"splits = (list(range(cut, len(train_df))),list(range(cut)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.499858Z","iopub.execute_input":"2024-11-20T19:30:16.500250Z","iopub.status.idle":"2024-11-20T19:30:16.541475Z","shell.execute_reply.started":"2024-11-20T19:30:16.500213Z","shell.execute_reply":"2024-11-20T19:30:16.539772Z"}},"outputs":[],"execution_count":678},{"cell_type":"code","source":"paths = Path(\"/kaggle/working/\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.543542Z","iopub.execute_input":"2024-11-20T19:30:16.544308Z","iopub.status.idle":"2024-11-20T19:30:16.561659Z","shell.execute_reply.started":"2024-11-20T19:30:16.544224Z","shell.execute_reply":"2024-11-20T19:30:16.560197Z"}},"outputs":[],"execution_count":679},{"cell_type":"code","source":"%time to = TabularPandas(train_df, procs, cat_names, cont_names, dep_var, y_block=TransformBlock(), splits=splits)\n     ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:16.563649Z","iopub.execute_input":"2024-11-20T19:30:16.564114Z","iopub.status.idle":"2024-11-20T19:30:19.238844Z","shell.execute_reply.started":"2024-11-20T19:30:16.564043Z","shell.execute_reply":"2024-11-20T19:30:19.237377Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  to[n].fillna(self.na_dict[n], inplace=True)\n/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  to[n].fillna(self.na_dict[n], inplace=True)\n","output_type":"stream"},{"name":"stdout","text":"CPU times: user 2.14 s, sys: 496 ms, total: 2.63 s\nWall time: 2.65 s\n","output_type":"stream"}],"execution_count":680},{"cell_type":"code","source":"dls = to.dataloaders(bs=512, path=paths)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:19.240857Z","iopub.execute_input":"2024-11-20T19:30:19.241543Z","iopub.status.idle":"2024-11-20T19:30:19.829590Z","shell.execute_reply.started":"2024-11-20T19:30:19.241493Z","shell.execute_reply":"2024-11-20T19:30:19.827380Z"}},"outputs":[],"execution_count":681},{"cell_type":"code","source":"dls.show_batch()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:19.831249Z","iopub.execute_input":"2024-11-20T19:30:19.831665Z","iopub.status.idle":"2024-11-20T19:30:20.272481Z","shell.execute_reply.started":"2024-11-20T19:30:19.831629Z","shell.execute_reply":"2024-11-20T19:30:20.271063Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Store</th>\n      <th>DayOfWeek</th>\n      <th>Year</th>\n      <th>Month</th>\n      <th>Day</th>\n      <th>StateHoliday</th>\n      <th>StoreType</th>\n      <th>Assortment</th>\n      <th>PromoInterval</th>\n      <th>CompetitionOpenSinceYear</th>\n      <th>Promo2SinceYear</th>\n      <th>State</th>\n      <th>Week</th>\n      <th>Events</th>\n      <th>Promo_fw</th>\n      <th>Promo_bw</th>\n      <th>StateHoliday_fw</th>\n      <th>StateHoliday_bw</th>\n      <th>SchoolHoliday_fw</th>\n      <th>SchoolHoliday_bw</th>\n      <th>CompetitionDistance_na</th>\n      <th>CloudCover_na</th>\n      <th>CompetitionDistance</th>\n      <th>Max_TemperatureC</th>\n      <th>Mean_TemperatureC</th>\n      <th>Min_TemperatureC</th>\n      <th>Max_Humidity</th>\n      <th>Mean_Humidity</th>\n      <th>Min_Humidity</th>\n      <th>Max_Wind_SpeedKm_h</th>\n      <th>Mean_Wind_SpeedKm_h</th>\n      <th>CloudCover</th>\n      <th>trend</th>\n      <th>trend_DE</th>\n      <th>AfterStateHoliday</th>\n      <th>BeforeStateHoliday</th>\n      <th>Promo</th>\n      <th>SchoolHoliday</th>\n      <th>Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>438</td>\n      <td>1</td>\n      <td>2014</td>\n      <td>4</td>\n      <td>7</td>\n      <td>False</td>\n      <td>d</td>\n      <td>c</td>\n      <td>Jan,Apr,Jul,Oct</td>\n      <td>#na#</td>\n      <td>2012.0</td>\n      <td>SN</td>\n      <td>15</td>\n      <td>#na#</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1110.000176</td>\n      <td>20.0</td>\n      <td>1.400000e+01</td>\n      <td>8.0</td>\n      <td>89.0</td>\n      <td>67.0</td>\n      <td>41.000000</td>\n      <td>16.0</td>\n      <td>11.0</td>\n      <td>5.0</td>\n      <td>66.000000</td>\n      <td>69.0</td>\n      <td>95.999998</td>\n      <td>-11.000001</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>8.297792</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>649</td>\n      <td>4</td>\n      <td>2015</td>\n      <td>2</td>\n      <td>5</td>\n      <td>False</td>\n      <td>a</td>\n      <td>a</td>\n      <td>#na#</td>\n      <td>2002.0</td>\n      <td>#na#</td>\n      <td>ST</td>\n      <td>6</td>\n      <td>Snow</td>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>4.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>14570.000328</td>\n      <td>2.0</td>\n      <td>3.018998e-07</td>\n      <td>-3.0</td>\n      <td>87.0</td>\n      <td>74.0</td>\n      <td>51.000000</td>\n      <td>14.0</td>\n      <td>5.0</td>\n      <td>8.0</td>\n      <td>69.000000</td>\n      <td>66.0</td>\n      <td>30.000000</td>\n      <td>-57.000000</td>\n      <td>1.000000e+00</td>\n      <td>1.000000e+00</td>\n      <td>8.103191</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>816</td>\n      <td>4</td>\n      <td>2013</td>\n      <td>11</td>\n      <td>14</td>\n      <td>False</td>\n      <td>c</td>\n      <td>c</td>\n      <td>#na#</td>\n      <td>#na#</td>\n      <td>#na#</td>\n      <td>NW</td>\n      <td>46</td>\n      <td>Fog-Rain</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>460.000058</td>\n      <td>6.0</td>\n      <td>4.000000e+00</td>\n      <td>2.0</td>\n      <td>100.0</td>\n      <td>93.0</td>\n      <td>81.000000</td>\n      <td>21.0</td>\n      <td>11.0</td>\n      <td>7.0</td>\n      <td>68.000000</td>\n      <td>71.0</td>\n      <td>13.000000</td>\n      <td>-41.000000</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>8.275122</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>469</td>\n      <td>2</td>\n      <td>2013</td>\n      <td>3</td>\n      <td>12</td>\n      <td>False</td>\n      <td>c</td>\n      <td>c</td>\n      <td>#na#</td>\n      <td>2005.0</td>\n      <td>#na#</td>\n      <td>BE</td>\n      <td>11</td>\n      <td>Snow</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>709.999817</td>\n      <td>-2.0</td>\n      <td>-4.000000e+00</td>\n      <td>-6.0</td>\n      <td>93.0</td>\n      <td>76.0</td>\n      <td>51.000000</td>\n      <td>19.0</td>\n      <td>8.0</td>\n      <td>6.0</td>\n      <td>72.000000</td>\n      <td>62.0</td>\n      <td>69.999999</td>\n      <td>-16.999999</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>9.029657</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>641</td>\n      <td>6</td>\n      <td>2014</td>\n      <td>11</td>\n      <td>29</td>\n      <td>False</td>\n      <td>a</td>\n      <td>c</td>\n      <td>Mar,Jun,Sept,Dec</td>\n      <td>2003.0</td>\n      <td>2013.0</td>\n      <td>NW</td>\n      <td>48</td>\n      <td>Fog</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>610.000193</td>\n      <td>6.0</td>\n      <td>2.000000e+00</td>\n      <td>-2.0</td>\n      <td>100.0</td>\n      <td>85.0</td>\n      <td>68.000000</td>\n      <td>21.0</td>\n      <td>11.0</td>\n      <td>6.0</td>\n      <td>88.000001</td>\n      <td>86.0</td>\n      <td>28.000000</td>\n      <td>-26.000000</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>8.627123</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>121</td>\n      <td>3</td>\n      <td>2014</td>\n      <td>5</td>\n      <td>28</td>\n      <td>False</td>\n      <td>a</td>\n      <td>a</td>\n      <td>Mar,Jun,Sept,Dec</td>\n      <td>2009.0</td>\n      <td>2013.0</td>\n      <td>SN</td>\n      <td>22</td>\n      <td>Rain</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>3570.000007</td>\n      <td>13.0</td>\n      <td>1.100000e+01</td>\n      <td>10.0</td>\n      <td>100.0</td>\n      <td>96.0</td>\n      <td>91.000000</td>\n      <td>24.0</td>\n      <td>11.0</td>\n      <td>7.0</td>\n      <td>63.000000</td>\n      <td>71.0</td>\n      <td>27.000000</td>\n      <td>-0.999998</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>8.445482</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>611</td>\n      <td>5</td>\n      <td>2013</td>\n      <td>2</td>\n      <td>1</td>\n      <td>False</td>\n      <td>a</td>\n      <td>a</td>\n      <td>Jan,Apr,Jul,Oct</td>\n      <td>2002.0</td>\n      <td>2014.0</td>\n      <td>BY</td>\n      <td>5</td>\n      <td>Rain</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>8080.000048</td>\n      <td>7.0</td>\n      <td>6.000000e+00</td>\n      <td>4.0</td>\n      <td>100.0</td>\n      <td>91.0</td>\n      <td>76.000000</td>\n      <td>32.0</td>\n      <td>19.0</td>\n      <td>7.0</td>\n      <td>51.000000</td>\n      <td>58.0</td>\n      <td>26.000000</td>\n      <td>-56.000000</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>8.580919</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>464</td>\n      <td>1</td>\n      <td>2013</td>\n      <td>10</td>\n      <td>21</td>\n      <td>False</td>\n      <td>c</td>\n      <td>a</td>\n      <td>#na#</td>\n      <td>2009.0</td>\n      <td>#na#</td>\n      <td>BE</td>\n      <td>43</td>\n      <td>Rain</td>\n      <td>5.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>519.999833</td>\n      <td>18.0</td>\n      <td>1.600000e+01</td>\n      <td>13.0</td>\n      <td>94.0</td>\n      <td>76.0</td>\n      <td>53.000000</td>\n      <td>27.0</td>\n      <td>13.0</td>\n      <td>6.0</td>\n      <td>67.000000</td>\n      <td>60.0</td>\n      <td>18.000000</td>\n      <td>-64.999999</td>\n      <td>1.000000e+00</td>\n      <td>1.656364e-09</td>\n      <td>9.363062</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1028</td>\n      <td>1</td>\n      <td>2014</td>\n      <td>8</td>\n      <td>11</td>\n      <td>False</td>\n      <td>a</td>\n      <td>a</td>\n      <td>Jan,Apr,Jul,Oct</td>\n      <td>#na#</td>\n      <td>2013.0</td>\n      <td>NW</td>\n      <td>33</td>\n      <td>Rain-Thunderstorm</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>150.000060</td>\n      <td>21.0</td>\n      <td>1.800000e+01</td>\n      <td>14.0</td>\n      <td>82.0</td>\n      <td>65.0</td>\n      <td>35.000001</td>\n      <td>29.0</td>\n      <td>24.0</td>\n      <td>3.0</td>\n      <td>85.000000</td>\n      <td>81.0</td>\n      <td>53.000000</td>\n      <td>-53.000000</td>\n      <td>1.436881e-08</td>\n      <td>1.000000e+00</td>\n      <td>8.155936</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1036</td>\n      <td>6</td>\n      <td>2014</td>\n      <td>9</td>\n      <td>13</td>\n      <td>False</td>\n      <td>d</td>\n      <td>c</td>\n      <td>Jan,Apr,Jul,Oct</td>\n      <td>#na#</td>\n      <td>2013.0</td>\n      <td>NW</td>\n      <td>37</td>\n      <td>Fog</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>9559.999839</td>\n      <td>21.0</td>\n      <td>1.600000e+01</td>\n      <td>12.0</td>\n      <td>94.0</td>\n      <td>75.0</td>\n      <td>43.000000</td>\n      <td>21.0</td>\n      <td>13.0</td>\n      <td>4.0</td>\n      <td>75.999999</td>\n      <td>70.0</td>\n      <td>86.000000</td>\n      <td>-20.000000</td>\n      <td>1.436881e-08</td>\n      <td>1.656364e-09</td>\n      <td>8.170752</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}}],"execution_count":682},{"cell_type":"markdown","source":"## Model ##","metadata":{}},{"cell_type":"code","source":"max_log_y = np.log(1.2) + np.max(train_df['Sales'])\ny_range = (0, max_log_y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:20.274198Z","iopub.execute_input":"2024-11-20T19:30:20.274621Z","iopub.status.idle":"2024-11-20T19:30:20.283136Z","shell.execute_reply.started":"2024-11-20T19:30:20.274579Z","shell.execute_reply":"2024-11-20T19:30:20.281934Z"}},"outputs":[],"execution_count":683},{"cell_type":"code","source":"dls.c = 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:20.284738Z","iopub.execute_input":"2024-11-20T19:30:20.285233Z","iopub.status.idle":"2024-11-20T19:30:20.298649Z","shell.execute_reply.started":"2024-11-20T19:30:20.285176Z","shell.execute_reply":"2024-11-20T19:30:20.297354Z"}},"outputs":[],"execution_count":684},{"cell_type":"code","source":"learn = tabular_learner(dls, layers=[1000,500], loss_func=MSELossFlat(),\n                        config=tabular_config(ps=[0.001,0.01], embed_p=0.04, y_range=y_range), \n                        metrics=exp_rmspe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:20.300585Z","iopub.execute_input":"2024-11-20T19:30:20.300998Z","iopub.status.idle":"2024-11-20T19:30:20.332963Z","shell.execute_reply.started":"2024-11-20T19:30:20.300960Z","shell.execute_reply":"2024-11-20T19:30:20.331758Z"}},"outputs":[],"execution_count":685},{"cell_type":"code","source":"learn.model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:20.334619Z","iopub.execute_input":"2024-11-20T19:30:20.334976Z","iopub.status.idle":"2024-11-20T19:30:20.343146Z","shell.execute_reply.started":"2024-11-20T19:30:20.334940Z","shell.execute_reply":"2024-11-20T19:30:20.342048Z"}},"outputs":[{"execution_count":686,"output_type":"execute_result","data":{"text/plain":"TabularModel(\n  (embeds): ModuleList(\n    (0): Embedding(1116, 81)\n    (1): Embedding(8, 5)\n    (2): Embedding(4, 3)\n    (3): Embedding(13, 7)\n    (4): Embedding(32, 11)\n    (5): Embedding(3, 3)\n    (6): Embedding(5, 4)\n    (7-8): 2 x Embedding(4, 3)\n    (9): Embedding(24, 9)\n    (10): Embedding(8, 5)\n    (11): Embedding(13, 7)\n    (12): Embedding(53, 15)\n    (13): Embedding(22, 9)\n    (14-15): 2 x Embedding(7, 5)\n    (16-17): 2 x Embedding(4, 3)\n    (18-19): 2 x Embedding(9, 5)\n    (20-21): 2 x Embedding(3, 3)\n  )\n  (emb_drop): Dropout(p=0.04, inplace=False)\n  (bn_cont): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (layers): Sequential(\n    (0): LinBnDrop(\n      (0): Linear(in_features=213, out_features=1000, bias=False)\n      (1): ReLU(inplace=True)\n      (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (3): Dropout(p=0.001, inplace=False)\n    )\n    (1): LinBnDrop(\n      (0): Linear(in_features=1000, out_features=500, bias=False)\n      (1): ReLU(inplace=True)\n      (2): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (3): Dropout(p=0.01, inplace=False)\n    )\n    (2): LinBnDrop(\n      (0): Linear(in_features=500, out_features=1, bias=True)\n    )\n    (3): fastai.layers.SigmoidRange(low=0, high=10.816998424176623)\n  )\n)"},"metadata":{}}],"execution_count":686},{"cell_type":"code","source":"len(dls.train_ds.cont_names)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:20.344878Z","iopub.execute_input":"2024-11-20T19:30:20.345289Z","iopub.status.idle":"2024-11-20T19:30:20.362580Z","shell.execute_reply.started":"2024-11-20T19:30:20.345252Z","shell.execute_reply":"2024-11-20T19:30:20.361151Z"}},"outputs":[{"execution_count":687,"output_type":"execute_result","data":{"text/plain":"16"},"metadata":{}}],"execution_count":687},{"cell_type":"code","source":"lrs = learn.lr_find(suggest_funcs=(minimum, steep, valley, slide))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:20.364101Z","iopub.execute_input":"2024-11-20T19:30:20.364531Z","iopub.status.idle":"2024-11-20T19:30:27.036703Z","shell.execute_reply.started":"2024-11-20T19:30:20.364480Z","shell.execute_reply":"2024-11-20T19:30:27.035160Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/fastai/learner.py:53: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  state = torch.load(file, map_location=device, **torch_load_kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":688},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndls.train.y.hist(bins=50)\nplt.title(\"Distribución del target (Sales)\")\nplt.xlabel(\"Valores del target (Sales)\")\nplt.ylabel(\"Frecuencia\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:27.048381Z","iopub.execute_input":"2024-11-20T19:30:27.048779Z","iopub.status.idle":"2024-11-20T19:30:27.428530Z","shell.execute_reply.started":"2024-11-20T19:30:27.048740Z","shell.execute_reply":"2024-11-20T19:30:27.426953Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":690},{"cell_type":"code","source":"suggested_lrs = lrs.valley * 3\nsuggested_lrs\nepochs=4","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:27.430137Z","iopub.execute_input":"2024-11-20T19:30:27.430526Z","iopub.status.idle":"2024-11-20T19:30:27.435857Z","shell.execute_reply.started":"2024-11-20T19:30:27.430488Z","shell.execute_reply":"2024-11-20T19:30:27.434478Z"}},"outputs":[],"execution_count":691},{"cell_type":"code","source":"learn.fit_one_cycle(epochs, suggested_lrs, wd=0.2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:30:27.437682Z","iopub.execute_input":"2024-11-20T19:30:27.438058Z","iopub.status.idle":"2024-11-20T19:35:52.292471Z","shell.execute_reply.started":"2024-11-20T19:30:27.438022Z","shell.execute_reply":"2024-11-20T19:35:52.290034Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: left;\">\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>_exp_rmspe</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.069160</td>\n      <td>0.135880</td>\n      <td>0.657115</td>\n      <td>01:17</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.017554</td>\n      <td>0.025827</td>\n      <td>0.189830</td>\n      <td>01:19</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.011788</td>\n      <td>0.014706</td>\n      <td>0.130905</td>\n      <td>01:22</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.009517</td>\n      <td>0.013173</td>\n      <td>0.115146</td>\n      <td>01:25</td>\n    </tr>\n  </tbody>\n</table>"},"metadata":{}}],"execution_count":692},{"cell_type":"code","source":"\nlearn.recorder.plot_loss(skip_start=1000)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:52.295586Z","iopub.execute_input":"2024-11-20T19:35:52.296189Z","iopub.status.idle":"2024-11-20T19:35:52.839043Z","shell.execute_reply.started":"2024-11-20T19:35:52.296119Z","shell.execute_reply":"2024-11-20T19:35:52.837585Z"}},"outputs":[{"execution_count":693,"output_type":"execute_result","data":{"text/plain":"<Axes: title={'center': 'learning curve'}, xlabel='steps', ylabel='loss'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":693},{"cell_type":"markdown","source":"## Inference on the test set ##","metadata":{}},{"cell_type":"code","source":"test_to = to.new(test_df)\ntest_to.process()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:54.758318Z","iopub.execute_input":"2024-11-20T19:35:54.758677Z","iopub.status.idle":"2024-11-20T19:35:54.844589Z","shell.execute_reply.started":"2024-11-20T19:35:54.758643Z","shell.execute_reply":"2024-11-20T19:35:54.843418Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  to[n].fillna(self.na_dict[n], inplace=True)\n/opt/conda/lib/python3.10/site-packages/fastai/tabular/core.py:314: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  to[n].fillna(self.na_dict[n], inplace=True)\n","output_type":"stream"}],"execution_count":699},{"cell_type":"code","source":"test_dls = test_to.dataloaders(bs=512, path=path, shuffle_train=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:54.846125Z","iopub.execute_input":"2024-11-20T19:35:54.846467Z","iopub.status.idle":"2024-11-20T19:35:54.878867Z","shell.execute_reply.started":"2024-11-20T19:35:54.846432Z","shell.execute_reply":"2024-11-20T19:35:54.877749Z"}},"outputs":[],"execution_count":700},{"cell_type":"code","source":"learn.metrics=[]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:54.880440Z","iopub.execute_input":"2024-11-20T19:35:54.880839Z","iopub.status.idle":"2024-11-20T19:35:54.886420Z","shell.execute_reply.started":"2024-11-20T19:35:54.880801Z","shell.execute_reply":"2024-11-20T19:35:54.884990Z"}},"outputs":[],"execution_count":701},{"cell_type":"code","source":"tst_preds,_ = learn.get_preds(dl=test_dls.train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:54.887851Z","iopub.execute_input":"2024-11-20T19:35:54.888438Z","iopub.status.idle":"2024-11-20T19:35:56.254117Z","shell.execute_reply.started":"2024-11-20T19:35:54.888393Z","shell.execute_reply":"2024-11-20T19:35:56.252394Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n<style>\n    /* Turns off some styling */\n    progress {\n        /* gets rid of default border in Firefox and Opera. */\n        border: none;\n        /* Needs to be in here for Safari polyfill so background images work as expected. */\n        background-size: auto;\n    }\n    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n    }\n    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n        background: #F44336;\n    }\n</style>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}}],"execution_count":702},{"cell_type":"code","source":"np.exp(tst_preds.numpy()).T.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:56.255983Z","iopub.execute_input":"2024-11-20T19:35:56.256472Z","iopub.status.idle":"2024-11-20T19:35:56.266630Z","shell.execute_reply.started":"2024-11-20T19:35:56.256430Z","shell.execute_reply":"2024-11-20T19:35:56.265000Z"}},"outputs":[{"execution_count":703,"output_type":"execute_result","data":{"text/plain":"(1, 41088)"},"metadata":{}}],"execution_count":703},{"cell_type":"code","source":"test_df[\"Sales\"]=np.exp(tst_preds.numpy()).T[0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:56.268717Z","iopub.execute_input":"2024-11-20T19:35:56.269260Z","iopub.status.idle":"2024-11-20T19:35:56.285298Z","shell.execute_reply.started":"2024-11-20T19:35:56.269203Z","shell.execute_reply":"2024-11-20T19:35:56.283965Z"}},"outputs":[],"execution_count":704},{"cell_type":"code","source":"test_df[[\"Id\",\"Sales\"]] = test_df[[\"Id\",\"Sales\"]].astype(\"int\")\ntest_df[[\"Id\",\"Sales\"]].to_csv(\"submission.csv\",index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:56.286814Z","iopub.execute_input":"2024-11-20T19:35:56.287285Z","iopub.status.idle":"2024-11-20T19:35:56.344149Z","shell.execute_reply.started":"2024-11-20T19:35:56.287248Z","shell.execute_reply":"2024-11-20T19:35:56.342944Z"}},"outputs":[],"execution_count":705},{"cell_type":"code","source":"test_df[[\"Id\",\"Sales\"]]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T19:35:56.346059Z","iopub.execute_input":"2024-11-20T19:35:56.346595Z","iopub.status.idle":"2024-11-20T19:35:56.360835Z","shell.execute_reply.started":"2024-11-20T19:35:56.346546Z","shell.execute_reply":"2024-11-20T19:35:56.359568Z"}},"outputs":[{"execution_count":706,"output_type":"execute_result","data":{"text/plain":"            Id  Sales\n1017209      1   4258\n1017210      2   7020\n1017211      3   9173\n1017212      4   6371\n1017213      5   7132\n...        ...    ...\n1058292  41084   3037\n1058293  41085   7353\n1058294  41086   6417\n1058295  41087  23086\n1058296  41088   7183\n\n[41088 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1017209</th>\n      <td>1</td>\n      <td>4258</td>\n    </tr>\n    <tr>\n      <th>1017210</th>\n      <td>2</td>\n      <td>7020</td>\n    </tr>\n    <tr>\n      <th>1017211</th>\n      <td>3</td>\n      <td>9173</td>\n    </tr>\n    <tr>\n      <th>1017212</th>\n      <td>4</td>\n      <td>6371</td>\n    </tr>\n    <tr>\n      <th>1017213</th>\n      <td>5</td>\n      <td>7132</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1058292</th>\n      <td>41084</td>\n      <td>3037</td>\n    </tr>\n    <tr>\n      <th>1058293</th>\n      <td>41085</td>\n      <td>7353</td>\n    </tr>\n    <tr>\n      <th>1058294</th>\n      <td>41086</td>\n      <td>6417</td>\n    </tr>\n    <tr>\n      <th>1058295</th>\n      <td>41087</td>\n      <td>23086</td>\n    </tr>\n    <tr>\n      <th>1058296</th>\n      <td>41088</td>\n      <td>7183</td>\n    </tr>\n  </tbody>\n</table>\n<p>41088 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":706}]}